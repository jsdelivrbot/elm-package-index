[
  {
    "name": "List.Holey.Zipper",
    "comment": " Like a regular old list-zipper, except it can also focus on the holes\n_between_ elements.\n\nThis means you can represent an empty list, or point between two items and plug\nthat hole with a value.\n\n\n# Types\n\n@docs Zipper, Full, Hole\n\n\n# Creation\n\n@docs empty, singleton, zipper\n\n\n# Extraction\n\n@docs current, before, after\n\n\n# Navigation\n\n@docs next, previous, nextHole, previousHole, first, last, beforeFirst, afterLast, findForward, findBackward\n\n\n# Modification\n\n@docs map, mapCurrent, mapBefore, mapAfter, mapParts, plug, remove, append, prepend, insertAfter, insertBefore\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Full",
        "comment": " A `Zipper Full a` is pointing at an element of type `a`.\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Hole",
        "comment": " A `Zipper Hole a` is pointing at a hole between `a`s.\n\n... Heh.\n\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Zipper",
        "comment": " Represents `Zipper` over a list with items of type `a`. The type `t` will,\nin practice, always be either `Full` or `Hole`. When it is `Full`, the zipper is\nfocused on an item. When it is `Hole`, you're looking at a hole between elements.\n",
        "args": [
          "t",
          "a"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "after",
        "comment": " Conversely, list the things that come after the current location.\n",
        "type": "List.Holey.Zipper.Zipper t a -> List a"
      },
      {
        "name": "afterLast",
        "comment": " Go to the hole after the end of the zipper. Into the nothingness.\n",
        "type": "List.Holey.Zipper.Zipper t a -> List.Holey.Zipper.Zipper List.Holey.Zipper.Hole a"
      },
      {
        "name": "append",
        "comment": " Append a bunch of items after the zipper. This appends all the way at the end.\n",
        "type": "List a -> List.Holey.Zipper.Zipper t a -> List.Holey.Zipper.Zipper t a"
      },
      {
        "name": "before",
        "comment": " List the things that come before the current location in the zipper.\n",
        "type": "List.Holey.Zipper.Zipper t a -> List a"
      },
      {
        "name": "beforeFirst",
        "comment": " Go to the hole before the first element. Remember that holes surround\neverything! They are everywhere.\n",
        "type": "List.Holey.Zipper.Zipper t a -> List.Holey.Zipper.Zipper List.Holey.Zipper.Hole a"
      },
      {
        "name": "current",
        "comment": " Get the value the `Zipper` is currently pointing at.\n\nOnly applicable to zippers pointing at a value.\n\n",
        "type": "List.Holey.Zipper.Zipper List.Holey.Zipper.Full a -> a"
      },
      {
        "name": "empty",
        "comment": " Create an empty zipper. It's pointing at nothing, there's nothing before it\nand nothing after it. It's the loneliest of all zippers.\n",
        "type": "List.Holey.Zipper.Zipper List.Holey.Zipper.Hole a"
      },
      {
        "name": "findBackward",
        "comment": " Find the first element in the zipper matching a predicate, moving backwards\nfrom the current position.\n",
        "type": "(a -> Bool) -> List.Holey.Zipper.Zipper t a -> Maybe.Maybe (List.Holey.Zipper.Zipper List.Holey.Zipper.Full a)"
      },
      {
        "name": "findForward",
        "comment": " Find the first element in the zipper the matches a predicate, returning a\nzipper pointing at that thing if it was found. When provided with a zipper\npointing at a thing, that thing is also checked.\n\nThis start from the current location, and searches towards the end.\n\n",
        "type": "(a -> Bool) -> List.Holey.Zipper.Zipper t a -> Maybe.Maybe (List.Holey.Zipper.Zipper List.Holey.Zipper.Full a)"
      },
      {
        "name": "first",
        "comment": " Go to the first element in the Zipper. Note that this only accepts a zipper\nthat points at a thing, since it would have to return a `Maybe` otherwise.\n\nIf you want to zip back to the beginning of a zipper pointing at a hole, you can\nstill use `zipper |> previous |> Maybe.map first`\n\n",
        "type": "List.Holey.Zipper.Zipper List.Holey.Zipper.Full a -> List.Holey.Zipper.Zipper List.Holey.Zipper.Full a"
      },
      {
        "name": "insertAfter",
        "comment": " Insert something after the current location.\n",
        "type": "a -> List.Holey.Zipper.Zipper t a -> List.Holey.Zipper.Zipper t a"
      },
      {
        "name": "insertBefore",
        "comment": " Insert something before the current location.\n",
        "type": "a -> List.Holey.Zipper.Zipper t a -> List.Holey.Zipper.Zipper t a"
      },
      {
        "name": "last",
        "comment": " Go to the last element of a zipper. Same warnings as for `first` apply.\n",
        "type": "List.Holey.Zipper.Zipper List.Holey.Zipper.Full a -> List.Holey.Zipper.Zipper List.Holey.Zipper.Full a"
      },
      {
        "name": "map",
        "comment": " Execute a function on every item in the zipper.\n",
        "type": "(a -> b) -> List.Holey.Zipper.Zipper t a -> List.Holey.Zipper.Zipper t b"
      },
      {
        "name": "mapAfter",
        "comment": " Execute a function on all the things that come after the current location.\n",
        "type": "(a -> a) -> List.Holey.Zipper.Zipper t a -> List.Holey.Zipper.Zipper t a"
      },
      {
        "name": "mapBefore",
        "comment": " Execute a function on all the things that came before the current location.\n",
        "type": "(a -> a) -> List.Holey.Zipper.Zipper t a -> List.Holey.Zipper.Zipper t a"
      },
      {
        "name": "mapCurrent",
        "comment": " Execute a function on the current item in the zipper, when pointing at an\nitem.\n",
        "type": "(a -> a) -> List.Holey.Zipper.Zipper t a -> List.Holey.Zipper.Zipper t a"
      },
      {
        "name": "mapParts",
        "comment": " Execute a triplet of functions on the different parts of a zipper - what\ncame before, what comes after, and the current thing if there is one.\n",
        "type": "{ before : a -> b, current : a -> b, after : a -> b } -> List.Holey.Zipper.Zipper t a -> List.Holey.Zipper.Zipper t b"
      },
      {
        "name": "next",
        "comment": " Move the zipper to the next item, if there is one.\n",
        "type": "List.Holey.Zipper.Zipper t a -> Maybe.Maybe (List.Holey.Zipper.Zipper List.Holey.Zipper.Full a)"
      },
      {
        "name": "nextHole",
        "comment": " Move the zipper to the hole right after the current item. A hole is a whole\nlot of nothingness, so it's always there.\n",
        "type": "List.Holey.Zipper.Zipper List.Holey.Zipper.Full a -> List.Holey.Zipper.Zipper List.Holey.Zipper.Hole a"
      },
      {
        "name": "plug",
        "comment": " Plug a hole-y zipper.\n",
        "type": "a -> List.Holey.Zipper.Zipper List.Holey.Zipper.Hole a -> List.Holey.Zipper.Zipper List.Holey.Zipper.Full a"
      },
      {
        "name": "prepend",
        "comment": " Prepend a bunch of things to the zipper. All the way before anything else.\n",
        "type": "List a -> List.Holey.Zipper.Zipper t a -> List.Holey.Zipper.Zipper t a"
      },
      {
        "name": "previous",
        "comment": " Move the zipper to the previous item, if there is one.\n",
        "type": "List.Holey.Zipper.Zipper t a -> Maybe.Maybe (List.Holey.Zipper.Zipper List.Holey.Zipper.Full a)"
      },
      {
        "name": "previousHole",
        "comment": " Move the zipper to the hole right before the current item. Feel free to plug\nthat hole right up!\n",
        "type": "List.Holey.Zipper.Zipper List.Holey.Zipper.Full a -> List.Holey.Zipper.Zipper List.Holey.Zipper.Hole a"
      },
      {
        "name": "remove",
        "comment": " Punch a hole into the zipper by removing an element entirely. You can think\nof this as collapsing the holes around the element into a single hole, but\nhonestly the holes are everywhere.\n",
        "type": "List.Holey.Zipper.Zipper List.Holey.Zipper.Full a -> List.Holey.Zipper.Zipper List.Holey.Zipper.Hole a"
      },
      {
        "name": "singleton",
        "comment": " A zipper with a single thing in it. Singleton is just fancy-speak for single\nthing.\n",
        "type": "a -> List.Holey.Zipper.Zipper List.Holey.Zipper.Full a"
      },
      {
        "name": "zipper",
        "comment": " Construct a zipper from the head of a list and some elements to come after\nit.\n",
        "type": "a -> List a -> List.Holey.Zipper.Zipper List.Holey.Zipper.Full a"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]