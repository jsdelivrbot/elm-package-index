[
  {
    "name": "Tuple.Map",
    "comment": " Just a few convenient functions for mapping over pairs.\n\n@docs mapLeft, mapRight, mapEach, mapEach2, mapBoth, mapBoth2, map, map2\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "map",
        "comment": " Synonym for `mapBoth`.\n",
        "type": "(a -> a') -> ( a, a ) -> ( a', a' )"
      },
      {
        "name": "map2",
        "comment": " Synonym for `mapBoth2`.\n",
        "type": "(a -> a' -> a'') -> ( a, a ) -> ( a', a' ) -> ( a'', a'' )"
      },
      {
        "name": "mapBoth",
        "comment": " Apply the given function to both elements of the tuple.\n",
        "type": "(a -> a') -> ( a, a ) -> ( a', a' )"
      },
      {
        "name": "mapBoth2",
        "comment": " Apply the given function to both elements of both tuples.\n",
        "type": "(a -> a' -> a'') -> ( a, a ) -> ( a', a' ) -> ( a'', a'' )"
      },
      {
        "name": "mapEach",
        "comment": " Map over the tuple with two functions, one for each\nelement.\n",
        "type": "(a -> a') -> (b -> b') -> ( a, b ) -> ( a', b' )"
      },
      {
        "name": "mapEach2",
        "comment": " Map over two tuples with two functions, one for first elements \nand the other for second elements.\n",
        "type": "(a -> a' -> a'') -> (b -> b' -> b'') -> ( a, b ) -> ( a', b' ) -> ( a'', b'' )"
      },
      {
        "name": "mapLeft",
        "comment": " Apply the given function to the left element, leaving the\nright unchanged.\n",
        "type": "(a -> a') -> ( a, b ) -> ( a', b )"
      },
      {
        "name": "mapRight",
        "comment": " Apply the given function to the right element, leaving the\nleft unchanged.\n",
        "type": "(b -> b') -> ( a, b ) -> ( a, b' )"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  }
]