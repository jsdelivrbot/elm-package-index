[
  {
    "name": "Koivu",
    "comment": " An interactive tree representation of [AlloMedia](https://www.allo-media.fr/)'s Customer Path.\n\n\n# Minimal application setup\n\n    import Koivu\n    import Koivu.Tree as Tree\n    import Koivu.Settings exposing (Settings)\n    import Html\n\n    settings : Settings\n    settings =\n        { autoNormalize = False\n        , globalQty = 100000\n        , minNodeQty = 3000\n        , maxChildren = 4\n        , maxGlobalQty = 200000\n        , maxLevels = 3\n        , nodeWidth = 140\n        , nodeHeight = 80\n        , nodePadding = 10\n        }\n\n    main : Program Never Koivu.Model Koivu.Msg\n    main =\n        Tree.demoTree\n            |> Koivu.setup settings\n            |> Html.program\n\nYou'll find a more elaborate integration example [here](https://github.com/allo-media/koivu/tree/2.0.0/example).\n\n\n# Documentation\n\n@docs setup, Program, Model, Msg\n\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Koivu main model.\n",
        "args": [],
        "type": "{ root : Koivu.Tree.Node , editedNode : Maybe.Maybe Int , settings : Koivu.Settings.Settings }"
      },
      {
        "name": "Program",
        "comment": " A Koivu program.\n",
        "args": [],
        "type": "{ init : ( Koivu.Model, Platform.Cmd.Cmd Koivu.Msg ) , subscriptions : Koivu.Model -> Platform.Sub.Sub Koivu.Msg , update : Koivu.Msg -> Koivu.Model -> ( Koivu.Model, Platform.Cmd.Cmd Koivu.Msg ) , view : Koivu.Model -> Html.Html Koivu.Msg }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Koivu messages.\n",
        "args": [],
        "cases": [
          [
            "AppendChild",
            [
              "Int"
            ]
          ],
          [
            "CancelEdit",
            []
          ],
          [
            "CommitLabel",
            []
          ],
          [
            "DeleteNode",
            [
              "Int"
            ]
          ],
          [
            "EditNode",
            [
              "Int"
            ]
          ],
          [
            "NoOp",
            []
          ],
          [
            "Normalize",
            []
          ],
          [
            "SetAutoNormalize",
            [
              "Bool"
            ]
          ],
          [
            "ToggleLock",
            [
              "Int"
            ]
          ],
          [
            "UpdateLabel",
            [
              "Int",
              "String"
            ]
          ],
          [
            "UpdateQty",
            [
              "Int"
            ]
          ],
          [
            "UpdateShare",
            [
              "Int",
              "Int"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "setup",
        "comment": " Setup a Koivu program.\n",
        "type": "Koivu.Settings.Settings -> Koivu.Tree.Node -> Koivu.Program"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Koivu.Tree",
    "comment": " A representation of a Classification Tree.\n\n\n# Basics\n\n@docs Node, NodeInfo\n\n\n# Building a tree\n\n@docs empty, demoTree, appendChild, createNode, deleteNode, toggleLock, updateLabel, updateShare\n\n\n# Querying a tree\n\n@docs allowExpand, findNode, findNodes, getMaxSharable, getParent, getProp, getSiblings, isLockable, isUnderfed\n\n\n# Normalizing a tree\n\n@docs distributeShare, distributeQty, normalize\n\n\n# Encoding\n\n@docs encode\n\n",
    "aliases": [
      {
        "name": "NodeInfo",
        "comment": " A tree node information.\n",
        "args": [],
        "type": "{ id : Int , label : String , qty : Int , share : Int , locked : Bool , children : List Koivu.Tree.Node }"
      }
    ],
    "types": [
      {
        "name": "Node",
        "comment": " A tree node.\n",
        "args": [],
        "cases": [
          [
            "Node",
            [
              "Koivu.Tree.NodeInfo"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "allowExpand",
        "comment": " Check whether a node is allowed to append new children.\n",
        "type": "Koivu.Settings.Settings -> Int -> List Koivu.Tree.Node -> Bool"
      },
      {
        "name": "appendChild",
        "comment": " Append a new child to a node identified by its id in a tree.\n",
        "type": "Int -> Koivu.Tree.Node -> Koivu.Tree.Node -> Koivu.Tree.Node"
      },
      {
        "name": "createNode",
        "comment": " Create a new node to be addable to a given tree.\n\nA unique identifier is generated for this node.\n\n",
        "type": "Koivu.Tree.Node -> Koivu.Tree.Node"
      },
      {
        "name": "deleteNode",
        "comment": " Deletes a node from a tree, by its id.\n",
        "type": "Int -> Koivu.Tree.Node -> Koivu.Tree.Node"
      },
      {
        "name": "demoTree",
        "comment": " A sample tree, for demo purpose.\n",
        "type": "Koivu.Tree.Node"
      },
      {
        "name": "distributeQty",
        "comment": " Distributes a quantity across all nodes in a tree.\n",
        "type": "Int -> Koivu.Tree.Node -> Koivu.Tree.Node"
      },
      {
        "name": "distributeShare",
        "comment": " Distributes shares to a given node siblings in a tree, dealing with a\npossibly locked sibling.\n\nIf the target node itself is locked, this function is a noop.\n\n",
        "type": "Int -> Int -> Koivu.Tree.Node -> Koivu.Tree.Node"
      },
      {
        "name": "empty",
        "comment": " An empty node.\n",
        "type": "Koivu.Tree.Node"
      },
      {
        "name": "encode",
        "comment": " A tree JSON encoder.\n\n    demoTree\n    |> encode\n    |> Json.Encode.encode 2\n\n",
        "type": "Koivu.Tree.Node -> Json.Encode.Value"
      },
      {
        "name": "findNode",
        "comment": " Find a node in a tree, by its id.\n",
        "type": "Int -> Koivu.Tree.Node -> Maybe.Maybe Koivu.Tree.Node"
      },
      {
        "name": "findNodes",
        "comment": " Find nodes in a tree, by its id.\n",
        "type": "List Int -> Koivu.Tree.Node -> List (Maybe.Maybe Koivu.Tree.Node)"
      },
      {
        "name": "getMaxSharable",
        "comment": " Get maximum share a node can reach.\n",
        "type": "Int -> Koivu.Tree.Node -> Int"
      },
      {
        "name": "getParent",
        "comment": " Retrieve the parent of a given node in a tree, by its id.\n",
        "type": "Int -> Koivu.Tree.Node -> Maybe.Maybe Koivu.Tree.Node"
      },
      {
        "name": "getProp",
        "comment": " Helper to retrieve a `NodeInfo` property from a node.\n",
        "type": "(Koivu.Tree.NodeInfo -> a) -> Koivu.Tree.Node -> a"
      },
      {
        "name": "getSiblings",
        "comment": " Retrieve a node siblings identified by its id in a tree.\n",
        "type": "Int -> Koivu.Tree.Node -> List Koivu.Tree.Node"
      },
      {
        "name": "isLockable",
        "comment": " Check whether a node can be locked or not. A node can be locked if:\n\n  - it has more than one sibling\n  - and none of its sibling are already locked\n\n",
        "type": "Int -> Koivu.Tree.Node -> Bool"
      },
      {
        "name": "isUnderfed",
        "comment": " Checks whether a tree has all its nodes having the minimum quantity configured\nin the `Settings`.\n",
        "type": "Int -> Koivu.Tree.Node -> Bool"
      },
      {
        "name": "normalize",
        "comment": " Normalize a tree, ensuring all leaves have a minimum quantity assigned.\n",
        "type": "Int -> Koivu.Tree.Node -> Koivu.Tree.Node"
      },
      {
        "name": "toggleLock",
        "comment": " Toggles a locked status of a node. Locking a node means its share value is\nlocked and can't be modified, so distribution is guaranteed across its siblings\nonly.\n",
        "type": "Int -> Koivu.Tree.Node -> Koivu.Tree.Node"
      },
      {
        "name": "updateLabel",
        "comment": " Update a node label in a tree.\n",
        "type": "Int -> String -> Koivu.Tree.Node -> Koivu.Tree.Node"
      },
      {
        "name": "updateShare",
        "comment": " Update a node share in a tree.\n\nNote: if share is < 1, it will be forced to 1.\n\n",
        "type": "Int -> Int -> Koivu.Tree.Node -> Koivu.Tree.Node"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Koivu.Settings",
    "comment": " Koivu settings.\n\n@docs Settings\n\n",
    "aliases": [
      {
        "name": "Settings",
        "comment": " Settings description:\n\n  - `autoNormalize`: enable auto-normalization of the tree\n  - `globalQty`: initial global available quantity\n  - `minNodeQty`: minimal quantity for a viable tree\n  - `maxChildren`: maximum number of children per node\n  - `maxGlobalQty`: maximum global available quantity\n  - `maxLevels`: maximum depth for the tree\n  - `nodeWidth`: node width, in pixels\n  - `nodeHeight`: node height, in pixels\n  - `nodePadding`: node padding, in pixels\n\n",
        "args": [],
        "type": "{ autoNormalize : Bool , globalQty : Int , maxChildren : Int , maxGlobalQty : Int , maxLevels : Int , minNodeQty : Int , nodeWidth : Int , nodeHeight : Int , nodePadding : Int }"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  }
]