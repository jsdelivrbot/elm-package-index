[
  {
    "name": "String.Conversions",
    "comment": " Helpers to convert common types into a `String`.\n\n@docs fromBool\n@docs fromDay\n@docs fromDict\n@docs fromHttpError\n@docs fromHttpResponse\n@docs fromList\n@docs fromMaybe\n@docs fromMonth\n@docs fromRecord\n@docs fromSet\n@docs fromString\n@docs fromTuple2\n@docs fromTuple3\n@docs fromValue\n@docs withUnionConstructor\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "fromBool",
        "comment": " Convert a Bool to a String matching its constructor.\n",
        "type": "Bool -> String"
      },
      {
        "name": "fromDay",
        "comment": " Convert a Date.Day to a String matching its constructor.\n",
        "type": "Date.Day -> String"
      },
      {
        "name": "fromDict",
        "comment": " Convert a Dict to a String using nested conversions.\n\n    import Dict\n    import String.Extra exposing (fromFloat, fromInt)\n\n    fromDict fromInt fromFloat (Dict.fromList [(1, 1.5)])\n    --> \"Dict.fromList [(1,1.5)]\"\n\n",
        "type": "(comparable -> String) -> (v -> String) -> Dict.Dict comparable v -> String"
      },
      {
        "name": "fromHttpError",
        "comment": " Convert an Http.Error to a String.\n",
        "type": "Http.Error -> String"
      },
      {
        "name": "fromHttpResponse",
        "comment": " Convert an Http.Response String to a String.\n",
        "type": "Http.Response String -> String"
      },
      {
        "name": "fromList",
        "comment": " Convert a List to a string using a nested conversion.\n\n    import String.Extra exposing (fromInt)\n\n    fromList fromInt [1, 2, 3]\n    --> \"[1,2,3]\"\n\n",
        "type": "(a -> String) -> List a -> String"
      },
      {
        "name": "fromMaybe",
        "comment": " Convert a Maybe to a String using a nested conversion.\n\n    import String.Extra exposing (fromInt)\n\n    fromMaybe fromInt (Just 1)\n    --> \"Just 1\"\n\n",
        "type": "(a -> String) -> Maybe.Maybe a -> String"
      },
      {
        "name": "fromMonth",
        "comment": " Convert a Date.Month to a String matching its constructor.\n",
        "type": "Date.Month -> String"
      },
      {
        "name": "fromRecord",
        "comment": " Build a record string for debugging and logging with pairs of\nkeys and string conversion functions, meant to be paired with accessors\n\n    import String.Extra exposing (fromInt)\n\n    fromRecord [ (\"hello\", .hello >> fromInt ) ] { hello = 1 }\n    --> \"{ hello = 1 }\"\n\n",
        "type": "List ( String, a -> String ) -> a -> String"
      },
      {
        "name": "fromSet",
        "comment": " Convert a Set to a string using a nested conversion.\n\n    import Set\n    import String.Extra exposing (fromInt)\n\n    fromSet fromInt (Set.fromList [1, 2])\n    --> \"Set.fromList [1,2]\"\n\n",
        "type": "(comparable -> String) -> Set.Set comparable -> String"
      },
      {
        "name": "fromString",
        "comment": " Convert a String to a debugging version of that String.\n\n    fromString \"hello \\\"world\\\"\"\n    --> \"\\\"hello \\\\\\\"world\\\\\\\"\\\"\"\n\n",
        "type": "String -> String"
      },
      {
        "name": "fromTuple2",
        "comment": " Convert a 2-tuple to a string using nested conversions.\n\n    import String.Extra exposing (fromFloat, fromInt)\n\n    fromTuple2 fromInt fromFloat ( 1, 1.5 )\n    --> \"(1,1.5)\"\n\n",
        "type": "(a -> String) -> (b -> String) -> ( a, b ) -> String"
      },
      {
        "name": "fromTuple3",
        "comment": " Convert a 3-tuple to a string using nested conversions.\n\n    import String.Extra exposing (fromInt, fromFloat)\n\n    fromTuple3 fromInt fromFloat fromInt ( 1, 1.5, 2 )\n    --> \"(1,1.5,2)\"\n\n",
        "type": "(a -> String) -> (b -> String) -> (c -> String) -> ( a, b, c ) -> String"
      },
      {
        "name": "fromValue",
        "comment": " Convert a Json.Decode.Value to a JSON String.\n",
        "type": "Json.Encode.Value -> String"
      },
      {
        "name": "withUnionConstructor",
        "comment": " Nest some arguments under a tag, including parentheses when needed. Helpful for printing union type values.\n\n    import String.Extra exposing (fromInt)\n\n    withUnionConstructor \"Ok\" [ fromInt 1 ]\n    --> \"Ok 1\"\n\n",
        "type": "String -> List String -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]