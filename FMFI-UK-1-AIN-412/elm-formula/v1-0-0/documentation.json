[
  {
    "name": "Formula",
    "comment": " This library parses and exports formulas.\n\n\n# Definitions\n\n@docs Formula, Signed, Substitution, Term\n\n\n# Parsers\n\n@docs parse, parseSigned, parseTerm\n\n\n# Strings\n\n@docs strFormula, strSigned, strTerm, strSubstitution, errorString\n\n\n# Helpers\n\n@docs substitute, isAlpha, isBeta, isGamma, isDelta, freeFormula, removeQuantifierAndSubstitute, isSignedComplementary, isSignedSubformulaOf, signedGetFormula, signedSubformulas, isSubformulaOf\n\n",
    "aliases": [
      {
        "name": "Substitution",
        "comment": " Type alias for substitution\n",
        "args": [],
        "type": "Dict.Dict String Formula.Term"
      }
    ],
    "types": [
      {
        "name": "Formula",
        "comment": " Formula\n",
        "args": [],
        "cases": [
          [
            "Atom",
            [
              "String",
              "List Formula.Term"
            ]
          ],
          [
            "Neg",
            [
              "Formula.Formula"
            ]
          ],
          [
            "Disj",
            [
              "Formula.Formula",
              "Formula.Formula"
            ]
          ],
          [
            "Conj",
            [
              "Formula.Formula",
              "Formula.Formula"
            ]
          ],
          [
            "Impl",
            [
              "Formula.Formula",
              "Formula.Formula"
            ]
          ],
          [
            "ForAll",
            [
              "String",
              "Formula.Formula"
            ]
          ],
          [
            "Exists",
            [
              "String",
              "Formula.Formula"
            ]
          ],
          [
            "FF",
            []
          ],
          [
            "FT",
            []
          ]
        ]
      },
      {
        "name": "Signed",
        "comment": " Signed with T[rue] or F[alse]\n",
        "args": [
          "a"
        ],
        "cases": [
          [
            "T",
            [
              "a"
            ]
          ],
          [
            "F",
            [
              "a"
            ]
          ]
        ]
      },
      {
        "name": "Term",
        "comment": " Term\n",
        "args": [],
        "cases": [
          [
            "Var",
            [
              "String"
            ]
          ],
          [
            "Fun",
            [
              "String",
              "List Formula.Term"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "errorString",
        "comment": " Format parsing error\n",
        "type": "Parser.Error -> String"
      },
      {
        "name": "freeFormula",
        "comment": " Returns set of all free variables in given formula\n",
        "type": "Formula.Formula -> Set.Set String"
      },
      {
        "name": "isAlpha",
        "comment": " Is the signed formula of type Alpha\n",
        "type": "Formula.Signed Formula.Formula -> Bool"
      },
      {
        "name": "isBeta",
        "comment": " Is the signed formula of type Beta\n",
        "type": "Formula.Signed Formula.Formula -> Bool"
      },
      {
        "name": "isDelta",
        "comment": " Is the signed formula of type Delta\n",
        "type": "Formula.Signed Formula.Formula -> Bool"
      },
      {
        "name": "isGamma",
        "comment": " Is the signed formula of type Gamma\n",
        "type": "Formula.Signed Formula.Formula -> Bool"
      },
      {
        "name": "isSignedComplementary",
        "comment": " Is the first Signed Formula complementary of the second Signed Formula\n",
        "type": "Formula.Signed Formula.Formula -> Formula.Signed Formula.Formula -> Bool"
      },
      {
        "name": "isSignedSubformulaOf",
        "comment": " Is the first a Signed subformula of the second\n",
        "type": "Formula.Signed Formula.Formula -> Formula.Signed Formula.Formula -> Bool"
      },
      {
        "name": "isSubformulaOf",
        "comment": " Is the first a subformula of the second\n",
        "type": "Formula.Formula -> Formula.Formula -> Bool"
      },
      {
        "name": "parse",
        "comment": " Parse string to Formula\n",
        "type": "String -> Result.Result Parser.Error Formula.Formula"
      },
      {
        "name": "parseSigned",
        "comment": " Parse string to Signed Formula\n",
        "type": "String -> Result.Result Parser.Error (Formula.Signed Formula.Formula)"
      },
      {
        "name": "parseTerm",
        "comment": " Parses string to Term\n",
        "type": "String -> Result.Result Parser.Error Formula.Term"
      },
      {
        "name": "removeQuantifierAndSubstitute",
        "comment": " Removes quantifier from given signed formula and returns formula after substitution or error\n",
        "type": "Formula.Substitution -> Formula.Formula -> Result.Result String Formula.Formula"
      },
      {
        "name": "signedGetFormula",
        "comment": " Get Formula out of Signed Formula\n",
        "type": "Formula.Signed Formula.Formula -> Formula.Formula"
      },
      {
        "name": "signedSubformulas",
        "comment": " Get signed subformulas as a list of signed formulas\n",
        "type": "Formula.Signed Formula.Formula -> List (Formula.Signed Formula.Formula)"
      },
      {
        "name": "strFormula",
        "comment": " String representation of a Formula\n",
        "type": "Formula.Formula -> String"
      },
      {
        "name": "strSigned",
        "comment": " String representation of a Signed Formula\n",
        "type": "Formula.Signed Formula.Formula -> String"
      },
      {
        "name": "strSubstitution",
        "comment": " String representation of a Substitution\n",
        "type": "Formula.Substitution -> String"
      },
      {
        "name": "strTerm",
        "comment": " String representation of a Term\n",
        "type": "Formula.Term -> String"
      },
      {
        "name": "substitute",
        "comment": " Checks if substitution is applicable and substitutes if yes. Returns Result.\nErrMessage or Formula after substitution\n",
        "type": "Formula.Substitution -> Formula.Formula -> Result.Result String Formula.Formula"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]