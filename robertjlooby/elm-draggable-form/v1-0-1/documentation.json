[
  {
    "name": "DraggableForm",
    "comment": "This package is used to create and update drag and drop forms that can\nbe moved around a canvas.\n\n# Models\n@docs Model, DraggableForm\n\n# Updating\n@docs Action, update\n\n# Viewing\n@docs render\n\n# Model Helpers\n@docs createCircle, createSquare",
    "aliases": [
      {
        "name": "DraggableForm",
        "comment": "The DraggableForm consists of a Graphics.Collage.Form that represents the\nactual Form to be rendered, an id (forms with the same id will be dragged\naround together), a position on the canvas, and a function that can be used\nto determine if a point on the canvas is inside that form. There are helper\nmethods below for creating DraggableForms of common shapes.",
        "args": [],
        "type": "{ form : Graphics.Collage.Form , id : Int , isPointInside : ( Int, Int ) -> ( Int, Int ) -> Bool , position : ( Int, Int ) }"
      },
      {
        "name": "Model",
        "comment": "The Model consists of a List of DraggableForms and the id of the currently\nselected form.\n\n    { forms = [ draggableForm ], selectedId = Nothing }",
        "args": [],
        "type": "{ forms : List DraggableForm.DraggableForm , selectedId : Maybe.Maybe Int }"
      }
    ],
    "types": [
      {
        "name": "Action",
        "comment": "Actions describing the ways the model can be updated. Generally,\nMoveSelected will follow the mouse position, ChangeSelected will be sent the\nmouse location when the mouse is clicked, and UnselectAll will be sent when\nthe mouse is released",
        "args": [],
        "cases": [
          [
            "MoveSelected",
            [
              "( Int, Int )"
            ]
          ],
          [
            "ChangeSelection",
            [
              "( Int, Int )"
            ]
          ],
          [
            "UnselectAll",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "createCircle",
        "comment": "Can be used to create a circle DraggableForm. Takes the Color of the\ncircle, the radius, the starting position, and the id.\n\n    createCircle Color.blue 100 (0, 0) 1",
        "type": "Color.Color -> Float -> ( Int, Int ) -> Int -> DraggableForm.DraggableForm"
      },
      {
        "name": "createSquare",
        "comment": "Can be used to create a square DraggableForm. Takes the Color of the\nsquare, the side length, the starting position, and the id.\n\n    createSquare Color.blue 100 (0, 0) 1",
        "type": "Color.Color -> Float -> ( Int, Int ) -> Int -> DraggableForm.DraggableForm"
      },
      {
        "name": "render",
        "comment": "The render function takes a Model and returns the List Form to be rendered\nin the collage by the client. The forms will have been moved to their correct\npositions and ordered with the most recently moved forms on \"top\".\n\n    collage width height <| render model",
        "type": "DraggableForm.Model -> List Graphics.Collage.Form"
      },
      {
        "name": "update",
        "comment": "The update function takes one of the Actions and a Model and returns the\nnew model.\n\n    update UnselectAll model",
        "type": "DraggableForm.Action -> DraggableForm.Model -> DraggableForm.Model"
      }
    ],
    "generated-with-elm-version": "0.15.1"
  }
]