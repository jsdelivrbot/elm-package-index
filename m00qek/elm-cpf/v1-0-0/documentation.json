[
  {
    "name": "Random.Cpf",
    "comment": " Generate a random CP\n@docs cpf\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "cpf",
        "comment": " Generate a random CPF\n",
        "type": "Random.Generator Cpf.CPF"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Cpf",
    "comment": " Manipulate and generate brazilian CPFs\n@docs CPF, fromList, fromText, toString, show\n",
    "aliases": [
      {
        "name": "CPF",
        "comment": " A brazilian CPF\n",
        "args": [],
        "type": "Internals.CPF"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "fromList",
        "comment": " Turn a valid list of integers into a CPF.\n(fromList [1,2,3,4,5,6,7,8,9,0,9] |> Result.map show) == Ok \"123.456.789-09\"\n",
        "type": "List Int -> Result.Result Cpf.Error Cpf.CPF"
      },
      {
        "name": "fromText",
        "comment": " Turn a valid string into a CPF.\n(fromText \"12345678909\" |> Result.map show) == Ok \"123.456.789-09\"\n(fromText \"123.456.789-09\" |> Result.map show) == Ok \"123.456.789-09\"\n",
        "type": "String -> Result.Result Cpf.Error Cpf.CPF"
      },
      {
        "name": "show",
        "comment": " Pretty print a given CPF\n",
        "type": "Cpf.CPF -> String"
      },
      {
        "name": "toString",
        "comment": " Turn a CPF into a string.\n",
        "type": "Cpf.CPF -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]