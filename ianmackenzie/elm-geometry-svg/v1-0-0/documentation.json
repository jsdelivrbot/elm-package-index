[
  {
    "name": "Geometry.Svg",
    "comment": " Draw 2D `elm-geometry` values as SVG.\n\n\n## Reading this documentation\n\nFor the examples, assume that the following imports are present:\n\n    import Svg exposing (Svg)\n    import Svg.Attributes as Attributes\n    import Geometry.Svg as Svg\n\nAlso assume that any necessary `elm-geometry` modules/types have been imported\nusing the following format:\n\n    import Point2d exposing (Point2d)\n\nAll examples use a Y-up coordinate system instead of SVG's Y-down (window)\ncoordinate system; they were all rendered with a final [`relativeTo`](#relativeTo)\ncall to flip the example 'upside down' for display.\n\n\n# Geometry\n\nThese functions turn `elm-geometry` 2D values into SVG elements with geometric\nattributes such as `points` and `transform` set appropriately. Each function\nalso accepts a list of additional SVG attributes such as `fill` or `stroke` that\nshould be added to the resulting element.\n\n@docs lineSegment2d, triangle2d, polyline2d, polygon2d, arc2d, ellipticalArc2d, circle2d, ellipse2d, quadraticSpline2d, cubicSpline2d, boundingBox2d\n\n\n# Transformations\n\nThese functions allow you to use all the normal `elm-geometry` 2D transformations on\narbitrary fragments of SVG. For example,\n\n    Svg.mirrorAcross Axis2d.x\n        (Svg.lineSegment2d [] lineSegment)\n\ndraws a line segment as SVG and then mirrors that SVG fragment. This is visually\nthe same as\n\n    Svg.lineSegment2d []\n        (LineSegment2d.mirrorAcross Axis2d.x lineSegment)\n\nwhich instead mirrors the line segment first and then draws the mirrored line\nsegment as SVG.\n\nIn the above example only a single SVG element was transformed, but all of these\ntransformation functions work equally well on arbitrarily complex fragments of\nSVG such as nested groups of elements of different types:\n\n    Svg.rotateAround Point2d.origin (degrees 30)\n        (Svg.g [ Attributes.stroke \"blue\" ]\n            [ Svg.lineSegment2d [] lineSegment\n            , Svg.circle2d [] someCircle\n            , Svg.g [ Attributes.fill \"orange\" ]\n                [ Svg.triangle2d [] firstTriangle\n                , Svg.triangle2d [] secondTriangle\n                ]\n            ]\n        )\n\nIf the transformation changes frequently (an animated rotation angle, for\nexample) while the geometry itself remains constant, using an SVG transformation\ncan be more efficient since the geometry itself does not have to be recreated\n(the SVG virtual DOM only has to update a transformation matrix).\n\n@docs scaleAbout, rotateAround, translateBy, mirrorAcross\n\n\n# Coordinate transformations\n\nSimilar to the above transformations, these functions allow `elm-geometry`\ncoordinate conversion transformations to be applied to arbitrary SVG elements.\n\n@docs relativeTo, placeIn\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "arc2d",
        "comment": " Draw an `Arc2d` as an SVG `<path>` with the given attributes.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#arc\" style=\"width: 100px; height: 110px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#arc`\n</iframe>\n\n    arc : Svg Never\n    arc =\n        Svg.arc2d\n            [ Attributes.stroke \"blue\"\n            , Attributes.strokeWidth \"5\"\n            ]\n            (Arc2d.with\n                { centerPoint =\n                    Point2d.fromCoordinates ( 100, 100 )\n                , startPoint =\n                    Point2d.fromCoordinates ( 150, 50 )\n                , sweptAngle = degrees 90\n                }\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> Arc2d.Arc2d -> Svg.Svg msg"
      },
      {
        "name": "boundingBox2d",
        "comment": " Draw a bounding box as an SVG `<rect>` with the given attributes.\n",
        "type": "List (Svg.Attribute msg) -> BoundingBox2d.BoundingBox2d -> Svg.Svg msg"
      },
      {
        "name": "circle2d",
        "comment": " Draw a `Circle2d` as an SVG `<circle>` with the given attributes.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#circle\" style=\"width: 40px; height: 40px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#circle`\n</iframe>\n\n    circle : Svg Never\n    circle =\n        Svg.circle2d\n            [ Attributes.fill \"orange\"\n            , Attributes.stroke \"blue\"\n            , Attributes.strokeWidth \"2\"\n            ]\n            (Circle2d.with\n                { centerPoint =\n                    Point2d.fromCoordinates ( 150, 150 )\n                , radius = 10\n                }\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> Circle2d.Circle2d -> Svg.Svg msg"
      },
      {
        "name": "cubicSpline2d",
        "comment": " Draw a cubic spline as an SVG `<path>` with the given attributes.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#cubicSpline\" style=\"width: 190px; height: 165px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#cubicSpline`\n</iframe>\n\n    cubicSpline : Svg Never\n    cubicSpline =\n        let\n            startPoint =\n                Point2d.fromCoordinates ( 50, 50 )\n\n            startControlPoint =\n                Point2d.fromCoordinates ( 100, 150 )\n\n            endControlPoint =\n                Point2d.fromCoordinates ( 150, 25 )\n\n            endPoint =\n                Point2d.fromCoordinates ( 200, 125 )\n\n            spline =\n                CubicSpline2d.with\n                    { startPoint = startPoint\n                    , startControlPoint = startControlPoint\n                    , endControlPoint = endControlPoint\n                    , endPoint = endPoint\n                    }\n\n            points =\n                [ startPoint\n                , startControlPoint\n                , endControlPoint\n                , endPoint\n                ]\n\n            drawPoint point =\n                Svg.circle2d []\n                    (Circle2d.withRadius 3 point)\n        in\n        Svg.g [ Attributes.stroke \"blue\" ]\n            [ Svg.cubicSpline2d\n                [ Attributes.strokeWidth \"3\"\n                , Attributes.strokeLinecap \"round\"\n                , Attributes.fill \"none\"\n                ]\n                spline\n            , Svg.polyline2d\n                [ Attributes.strokeWidth \"1\"\n                , Attributes.fill \"none\"\n                , Attributes.strokeDasharray \"3 3\"\n                ]\n                (Polyline2d.fromVertices points)\n            , Svg.g [ Attributes.fill \"white\" ]\n                (List.map drawPoint points)\n            ]\n\n",
        "type": "List (Svg.Attribute msg) -> CubicSpline2d.CubicSpline2d -> Svg.Svg msg"
      },
      {
        "name": "ellipse2d",
        "comment": " Draw an `Ellipse2d` as an SVG `<ellipse>` with the given attributes.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#ellipse\" style=\"width: 140px; height: 100px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#ellipse`\n</iframe>\n\n    ellipse : Svg Never\n    ellipse =\n        Svg.ellipse2d\n            [ Attributes.fill \"orange\"\n            , Attributes.stroke \"blue\"\n            , Attributes.strokeWidth \"2\"\n            ]\n            (Ellipse2d.with\n                { centerPoint =\n                    Point2d.fromCoordinates ( 150, 150 )\n                , xDirection =\n                    Direction2d.fromAngle (degrees -30)\n                , xRadius = 60\n                , yRadius = 30\n                }\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> Ellipse2d.Ellipse2d -> Svg.Svg msg"
      },
      {
        "name": "ellipticalArc2d",
        "comment": " Draw an `EllipticalArc2d` as an SVG `<path>` with the given attributes.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#ellipticalArc\" style=\"width: 120px; height: 120px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#ellipticalArc`\n</iframe>\n\n    ellipticalArc : Svg Never\n    ellipticalArc =\n        Svg.ellipticalArc2d\n            [ Attributes.stroke \"blue\"\n            , Attributes.fill \"none\"\n            , Attributes.strokeWidth \"5\"\n            , Attributes.strokeLinecap \"round\"\n            ]\n            (EllipticalArc2d.with\n                { centerPoint =\n                    Point2d.fromCoordinates ( 100, 10 )\n                , xDirection = Direction2d.x\n                , xRadius = 50\n                , yRadius = 100\n                , startAngle = 0\n                , sweptAngle = degrees 180\n                }\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> EllipticalArc2d.EllipticalArc2d -> Svg.Svg msg"
      },
      {
        "name": "lineSegment2d",
        "comment": " Draw a `LineSegment2d` as an SVG `<polyline>` with the given attributes.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#lineSegment\" style=\"width: 120px; height: 120px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#lineSegment`\n</iframe>\n\n    lineSegment : Svg Never\n    lineSegment =\n        Svg.lineSegment2d\n            [ Attributes.stroke \"blue\"\n            , Attributes.strokeWidth \"5\"\n            ]\n            (LineSegment2d.fromEndpoints\n                ( Point2d.fromCoordinates ( 100, 100 )\n                , Point2d.fromCoordinates ( 200, 200 )\n                )\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> LineSegment2d.LineSegment2d -> Svg.Svg msg"
      },
      {
        "name": "mirrorAcross",
        "comment": " Mirror arbitrary SVG across a given axis.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#mirrored\" style=\"width: 230px; height: 280px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#mirrored`\n</iframe>\n\n    mirrored : Svg Never\n    mirrored =\n        let\n            horizontalAxis =\n                Axis2d.with\n                    { originPoint =\n                        Point2d.fromCoordinates ( 0, 220 )\n                    , direction = Direction2d.x\n                    }\n\n            horizontalSegment =\n                LineSegment2d.along horizontalAxis 50 250\n\n            angledAxis =\n                Axis2d.with\n                    { originPoint =\n                        Point2d.fromCoordinates ( 0, 150 )\n                    , direction =\n                        Direction2d.fromAngle (degrees -10)\n                    }\n\n            angledSegment =\n                LineSegment2d.along angledAxis 50 250\n        in\n        Svg.g []\n            [ polygon\n            , Svg.mirrorAcross horizontalAxis polygon\n            , Svg.mirrorAcross angledAxis polygon\n            , Svg.g\n                [ Attributes.strokeWidth \"0.5\"\n                , Attributes.stroke \"black\"\n                , Attributes.strokeDasharray \"3 3\"\n                ]\n                [ Svg.lineSegment2d [] horizontalSegment\n                , Svg.lineSegment2d [] angledSegment\n                ]\n            ]\n\n",
        "type": "Axis2d.Axis2d -> Svg.Svg msg -> Svg.Svg msg"
      },
      {
        "name": "placeIn",
        "comment": " Take SVG defined in local coordinates relative to a given reference frame,\nand return that SVG expressed in global coordinates.\n\nThis can be useful for taking a chunk of SVG and 'stamping' it in different\npositions with different orientations:\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#placed\" style=\"width: 225px; height: 180px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#placed`\n</iframe>\n\n    placed : Svg Never\n    placed =\n        let\n            vertices =\n                [ Point2d.origin\n                , Point2d.fromCoordinates ( 40, 0 )\n                , Point2d.fromCoordinates ( 50, 25 )\n                , Point2d.fromCoordinates ( 10, 25 )\n                ]\n\n            stamp =\n                Svg.polygon2d\n                    [ Attributes.fill \"orange\"\n                    , Attributes.stroke \"blue\"\n                    , Attributes.strokeWidth \"2\"\n                    ]\n                    (Polygon2d.fromVertices vertices)\n\n            frames =\n                [ Frame2d.atPoint\n                    (Point2d.fromCoordinates ( 25, 25 ))\n                , Frame2d.atPoint\n                    (Point2d.fromCoordinates ( 100, 25 ))\n                , Frame2d.atPoint\n                    (Point2d.fromCoordinates ( 175, 25 ))\n                    |> Frame2d.rotateBy (degrees 20)\n                , Frame2d.atPoint\n                    (Point2d.fromCoordinates ( 25, 150 ))\n                , Frame2d.atPoint\n                    (Point2d.fromCoordinates ( 100, 100 ))\n                    |> Frame2d.rotateBy (degrees 20)\n                , Frame2d.atPoint\n                    (Point2d.fromCoordinates ( 150, 150 ))\n                    |> Frame2d.rotateBy (degrees -30)\n                ]\n        in\n        Svg.g []\n            (frames\n                |> List.map\n                    (\\frame -> Svg.placeIn frame stamp)\n            )\n\n",
        "type": "Frame2d.Frame2d -> Svg.Svg msg -> Svg.Svg msg"
      },
      {
        "name": "polygon2d",
        "comment": " Draw a `Polygon2d` as an SVG `<polygon>` with the given attributes.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#polygon\" style=\"width: 120px; height: 70px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#polygon`\n</iframe>\n\n    polygon : Svg Never\n    polygon =\n        Svg.polygon2d\n            [ Attributes.stroke \"blue\"\n            , Attributes.fill \"orange\"\n            , Attributes.strokeWidth \"3\"\n            ]\n            (Polygon2d.with\n                { outerLoop =\n                    [ Point2d.fromCoordinates ( 100, 200 )\n                    , Point2d.fromCoordinates ( 120, 150 )\n                    , Point2d.fromCoordinates ( 180, 150 )\n                    , Point2d.fromCoordinates ( 200, 200 )\n                    ]\n                , innerLoops =\n                    [ [ Point2d.fromCoordinates ( 150, 185 )\n                      , Point2d.fromCoordinates ( 165, 160 )\n                      , Point2d.fromCoordinates ( 135, 160 )\n                      ]\n                    ]\n                }\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> Polygon2d.Polygon2d -> Svg.Svg msg"
      },
      {
        "name": "polyline2d",
        "comment": " Draw a `Polyline2d` as an SVG `<polyline>` with the given attributes.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#polyline\" style=\"width: 120px; height: 120px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#polyline`\n</iframe>\n\n    polyline : Svg Never\n    polyline =\n        Svg.polyline2d\n            [ Attributes.stroke \"blue\"\n            , Attributes.fill \"none\"\n            , Attributes.strokeWidth \"5\"\n            , Attributes.strokeLinecap \"round\"\n            , Attributes.strokeLinejoin \"round\"\n            ]\n            (Polyline2d.fromVertices\n                [ Point2d.fromCoordinates ( 100, 100 )\n                , Point2d.fromCoordinates ( 120, 200 )\n                , Point2d.fromCoordinates ( 140, 100 )\n                , Point2d.fromCoordinates ( 160, 200 )\n                , Point2d.fromCoordinates ( 180, 100 )\n                , Point2d.fromCoordinates ( 200, 200 )\n                ]\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> Polyline2d.Polyline2d -> Svg.Svg msg"
      },
      {
        "name": "quadraticSpline2d",
        "comment": " Draw a quadratic spline as an SVG `<path>` with the given attributes.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#quadraticSpline\" style=\"width: 130px; height: 130px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#quadraticSpline`\n</iframe>\n\n    quadraticSpline : Svg Never\n    quadraticSpline =\n        let\n            startPoint =\n                Point2d.fromCoordinates ( 50, 50 )\n\n            controlPoint =\n                Point2d.fromCoordinates ( 100, 150 )\n\n            endPoint =\n                Point2d.fromCoordinates ( 150, 100 )\n\n            spline =\n                QuadraticSpline2d.with\n                    { startPoint = startPoint\n                    , controlPoint = controlPoint\n                    , endPoint = endPoint\n                    }\n\n            points =\n                [ startPoint, controlPoint, endPoint ]\n\n            drawPoint point =\n                Svg.circle2d []\n                    (Circle2d.withRadius 3 point)\n        in\n        Svg.g [ Attributes.stroke \"blue\" ]\n            [ Svg.quadraticSpline2d\n                [ Attributes.strokeWidth \"3\"\n                , Attributes.strokeLinecap \"round\"\n                , Attributes.fill \"none\"\n                ]\n                spline\n            , Svg.polyline2d\n                [ Attributes.strokeWidth \"1\"\n                , Attributes.fill \"none\"\n                , Attributes.strokeDasharray \"3 3\"\n                ]\n                (Polyline2d.fromVertices points)\n            , Svg.g [ Attributes.fill \"white\" ]\n                (List.map drawPoint points)\n            ]\n\n",
        "type": "List (Svg.Attribute msg) -> QuadraticSpline2d.QuadraticSpline2d -> Svg.Svg msg"
      },
      {
        "name": "relativeTo",
        "comment": " Convert SVG expressed in global coordinates to SVG expressed in coordinates\nrelative to a given reference frame. Using `relativeTo` can be useful for\ntransforming between model space and screen space - SVG coordinates start in the\ntop left, so positive Y is down, while in mathematical/geometric contexts\npositive Y is usually up.\n\nFor example, you might develop an SVG scene in a coordinate system where X and Y\neach range from 0 to 300 and positive Y is up. To turn this into a 300x300 SVG\ndrawing, first define the top-left SVG frame (coordinate system) in terms of\nthe model coordinate system:\n\n    topLeftPoint =\n        Point2d.fromCoordinates ( 0, 300 )\n\n    topLeftFrame =\n        Frame2d.atPoint topLeftPoint |> Frame2d.flipY\n\n(As expressed in the model frame, the top-left SVG frame is at the point\n(0, 300) and its Y direction is equal to the global negative Y direction.) If\n`scene` is an SVG element representing your scene, you could then transform it\ninto top-left SVG window coordinates and render the result to HTML with\n\n    Svg.svg\n        [ Attributes.width \"300\"\n        , Attributes.height \"300\"\n        ]\n        [ Svg.relativeTo topLeftFrame scene ]\n\n",
        "type": "Frame2d.Frame2d -> Svg.Svg msg -> Svg.Svg msg"
      },
      {
        "name": "rotateAround",
        "comment": " Rotate arbitrary SVG around a given point by a given angle.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#rotated\" style=\"width: 140px; height: 140px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#rotated`\n</iframe>\n\n    rotated : Svg Never\n    rotated =\n        let\n            angles =\n                List.range 0 9\n                    |> List.map\n                        (\\n -> degrees 30 * toFloat n)\n\n            referencePoint =\n                Point2d.fromCoordinates ( 200, 150 )\n\n            referencePoint =\n                Svg.circle2d [ Attributes.fill \"black\" ]\n                    (Circle2d.with\n                        { centerPoint = referencePoint\n                        , radius = 3\n                        }\n                    )\n\n            rotatedCircle : Float -> Svg Never\n            rotatedCircle angle =\n                Svg.rotateAround referencePoint angle circle\n        in\n        Svg.g []\n            (referencePoint\n                :: List.map rotatedCircle angles\n            )\n\n",
        "type": "Point2d.Point2d -> Float -> Svg.Svg msg -> Svg.Svg msg"
      },
      {
        "name": "scaleAbout",
        "comment": " Scale arbitrary SVG around a given point by a given scale.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#scaled\" style=\"width: 160px; height: 160px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#scaled`\n</iframe>\n\n    scaled : Svg Never\n    scaled =\n        let\n            scales =\n                [ 1.0, 1.5, 2.25 ]\n\n            referencePoint =\n                Point2d.fromCoordinates ( 100, 100 )\n\n            referencePoint =\n                Svg.circle2d [ Attributes.fill \"black\" ]\n                    (Circle2d.with\n                        { centerPoint = referencePoint\n                        , radius = 3\n                        }\n                    )\n\n            scaledCircle : Float -> Svg Never\n            scaledCircle scale =\n                Svg.scaleAbout referencePoint scale circle\n        in\n        Svg.g []\n            (referencePoint\n                :: List.map scaledCircle scales\n            )\n\nNote how _everything_ is scaled, including the stroke width of the circles. This\nmay or may not be what you want; if you wanted the same stroke width on all\ncircles, you could instead scale the `Circle2d` values themselves using\n`Circle2d.scaleAbout` and then draw the scaled circles with a specific stroke\nwidth using `Svg.circle2d`.\n\n",
        "type": "Point2d.Point2d -> Float -> Svg.Svg msg -> Svg.Svg msg"
      },
      {
        "name": "translateBy",
        "comment": " Translate arbitrary SVG by a given displacement.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#translated\" style=\"width: 128px; height: 230px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#translated`\n</iframe>\n\n    translated : Svg Never\n    translated =\n        Svg.g []\n            [ polyline\n            , polyline\n                |> Svg.translateBy\n                    (Vector2d.fromComponents ( 0, 40 ))\n            , polyline\n                |> Svg.translateBy\n                    (Vector2d.fromComponents ( 5, -60 ))\n            ]\n\n",
        "type": "Vector2d.Vector2d -> Svg.Svg msg -> Svg.Svg msg"
      },
      {
        "name": "triangle2d",
        "comment": " Draw a `Triangle2d` as an SVG `<polygon>` with the given attributes.\n\n<iframe src=\"https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#triangle\" style=\"width: 120px; height: 120px\" scrolling=no frameborder=0>\n`https://ianmackenzie.github.io/elm-geometry-svg/1.0.0/DocumentationExamples.html#triangle`\n</iframe>\n\n    triangle : Svg Never\n    triangle =\n        Svg.triangle2d\n            [ Attributes.stroke \"blue\"\n            , Attributes.strokeWidth \"10\"\n            , Attributes.strokeLinejoin \"round\"\n            , Attributes.fill \"orange\"\n            ]\n            (Triangle2d.fromVertices\n                ( Point2d.fromCoordinates ( 100, 100 )\n                , Point2d.fromCoordinates ( 200, 100 )\n                , Point2d.fromCoordinates ( 100, 200 )\n                )\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> Triangle2d.Triangle2d -> Svg.Svg msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]