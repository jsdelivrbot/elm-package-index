[
  {
    "name": "FormValidator",
    "comment": "\n\nA customizable form validation component.\n\n# Models\n\n@docs Form\n\n# Init\n\n@docs init\n\n# Accessors\n\n@docs fieldValues, fieldValue, fieldErrors\n\n# Updaters\n\n@docs updateValues, updateValue, updateAndValidateValues, updateAndValidateValue\n\n# Validators\n\n@docs validateForm, validateField, isFormInvalid, isFieldInvalid, isBlank, isEmpty, isInteger, isFloat, isIncluded, isExcluded, isGreaterThan, isLessThan, isBetween, isLengthGreaterThanEqualTo, isLengthLessThanEqualTo, isEmail\n\n# Views\n\n@docs viewField, viewErrors, viewError\n\n",
    "aliases": [
      {
        "name": "Form",
        "comment": " Models module wrapper. See Models module for details. ",
        "args": [
          "key"
        ],
        "type": "FormValidator.Models.Form key"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "fieldErrors",
        "comment": " Validator module wrapper. See Validator module for details. ",
        "type": "key -> FormValidator.Models.Form key -> FormValidator.Models.Errors"
      },
      {
        "name": "fieldValue",
        "comment": " Validator module wrapper. See Validator module for details. ",
        "type": "key -> FormValidator.Models.Form key -> String"
      },
      {
        "name": "fieldValues",
        "comment": " Validator module wrapper. See Validator module for details. ",
        "type": "key -> FormValidator.Form key -> List String"
      },
      {
        "name": "init",
        "comment": " Validator module wrapper. See Validator module for details. ",
        "type": "key -> FormValidator.Models.Validators -> FormValidator.Models.Field key"
      },
      {
        "name": "isBetween",
        "comment": " Validators module wrapper. See Validators module for details. ",
        "type": "Int -> Int -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isBlank",
        "comment": " Validators module wrapper. See Validators module for details. ",
        "type": "FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isEmail",
        "comment": " Validators module wrapper. See Validators module for details. ",
        "type": "FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isEmpty",
        "comment": " Validators module wrapper. See Validators module for details. ",
        "type": "FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isExcluded",
        "comment": " Validators module wrapper. See Validators module for details. ",
        "type": "List String -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isFieldInvalid",
        "comment": " Validator module wrapper. See Validator module for details. ",
        "type": "key -> FormValidator.Models.Form key -> Bool"
      },
      {
        "name": "isFloat",
        "comment": " Validators module wrapper. See Validators module for details. ",
        "type": "FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isFormInvalid",
        "comment": " Validator module wrapper. See Validator module for details. ",
        "type": "FormValidator.Models.Form key -> Bool"
      },
      {
        "name": "isGreaterThan",
        "comment": " Validators module wrapper. See Validators module for details. ",
        "type": "Int -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isIncluded",
        "comment": " Validators module wrapper. See Validators module for details. ",
        "type": "List String -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isInteger",
        "comment": " Validators module wrapper. See Validators module for details. ",
        "type": "FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isLengthGreaterThanEqualTo",
        "comment": " Validators module wrapper. See Validators module for details. ",
        "type": "Int -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isLengthLessThanEqualTo",
        "comment": " Validators module wrapper. See Validators module for details. ",
        "type": "Int -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isLessThan",
        "comment": " Validators module wrapper. See Validators module for details. ",
        "type": "Int -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "updateAndValidateValue",
        "comment": " Validator module wrapper. See Validator module for details. ",
        "type": "key -> FormValidator.Models.Value -> FormValidator.Models.Form key -> FormValidator.Models.Form key"
      },
      {
        "name": "updateAndValidateValues",
        "comment": " Validator module wrapper. See Validator module for details. ",
        "type": "key -> FormValidator.Models.Values -> FormValidator.Models.Form key -> FormValidator.Models.Form key"
      },
      {
        "name": "updateValue",
        "comment": " Validator module wrapper. See Validator module for details. ",
        "type": "key -> FormValidator.Models.Value -> FormValidator.Models.Form key -> FormValidator.Models.Form key"
      },
      {
        "name": "updateValues",
        "comment": " Validator module wrapper. See Validator module for details. ",
        "type": "key -> FormValidator.Models.Values -> FormValidator.Models.Form key -> FormValidator.Models.Form key"
      },
      {
        "name": "validateField",
        "comment": " Validator module wrapper. See Validator module for details. ",
        "type": "key -> FormValidator.Models.Form key -> FormValidator.Models.Form key"
      },
      {
        "name": "validateForm",
        "comment": " Validator module wrapper. See Validator module for details. ",
        "type": "FormValidator.Models.Form key -> FormValidator.Models.Form key"
      },
      {
        "name": "viewError",
        "comment": " Views module wrapper. See Views module for details. ",
        "type": "FormValidator.Models.Error -> Html.Html message"
      },
      {
        "name": "viewErrors",
        "comment": " Views module wrapper. See Views module for details. ",
        "type": "FormValidator.Models.Errors -> Html.Html message"
      },
      {
        "name": "viewField",
        "comment": " Views module wrapper. See Views module for details. ",
        "type": "key -> FormValidator.Models.Form key -> List String -> List (Html.Html message) -> Html.Html message"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "FormValidator.Views",
    "comment": "\n\nThe Form Validator views which are convenience methods for rendering fields within your form and\npage views.\n\n@docs field, errors, error\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "error",
        "comment": " View field error (if any) as a list item. ",
        "type": "FormValidator.Models.Error -> Html.Html message"
      },
      {
        "name": "errors",
        "comment": " View field errors (if any) as a unordered list. ",
        "type": "FormValidator.Models.Errors -> Html.Html message"
      },
      {
        "name": "field",
        "comment": " View field with errors (if any). To be used as a wrapper to field input field(s). ",
        "type": "key -> FormValidator.Models.Form key -> List String -> List (Html.Html message) -> Html.Html message"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "FormValidator.Validators",
    "comment": "\n\nThe Form Validator validators provide the functionality needed for validating a form field. These\ncan be mixed and matched as desired.\n\n@docs isBlank, isEmpty, isInteger, isFloat, isIncluded, isExcluded, isGreaterThan, isLessThan\n@docs isBetween, isLengthGreaterThanEqualTo, isLengthLessThanEqualTo, isEmail\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "isBetween",
        "comment": " Check if value is minimum and maximum. ",
        "type": "Int -> Int -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isBlank",
        "comment": " Check if value is blank. ",
        "type": "FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isEmail",
        "comment": " Check if value is an email address. ",
        "type": "FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isEmpty",
        "comment": " Check if value is empty. ",
        "type": "FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isExcluded",
        "comment": " Check if value is excluded from list. ",
        "type": "List String -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isFloat",
        "comment": " Check if value is a float. ",
        "type": "FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isGreaterThan",
        "comment": " Check if value is greater than minimum. ",
        "type": "Int -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isIncluded",
        "comment": " Check if value is included in list. ",
        "type": "List String -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isInteger",
        "comment": " Check if value is an integer. ",
        "type": "FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isLengthGreaterThanEqualTo",
        "comment": " Check if value length is greater than or equal to minimum. ",
        "type": "Int -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isLengthLessThanEqualTo",
        "comment": " Check if value length is less than or equal to maximum. ",
        "type": "Int -> FormValidator.Models.Value -> FormValidator.Models.Error"
      },
      {
        "name": "isLessThan",
        "comment": " Check if value is less than maximum. ",
        "type": "Int -> FormValidator.Models.Value -> FormValidator.Models.Error"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "FormValidator.Validator",
    "comment": "\n\nThe Form Validator validator which is main module used to manage forms and fields.\n\n@docs init, fieldValues, fieldValue, fieldErrors, updateValues, updateValue, updateAndValidateValues\n@docs updateAndValidateValue, validateForm, validateField, isFormInvalid, isFieldInvalid\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "fieldErrors",
        "comment": " Answer all errors for a field. ",
        "type": "key -> FormValidator.Models.Form key -> FormValidator.Models.Errors"
      },
      {
        "name": "fieldValue",
        "comment": " Answer single field value. ",
        "type": "key -> FormValidator.Models.Form key -> String"
      },
      {
        "name": "fieldValues",
        "comment": " Answer multiple field values. ",
        "type": "key -> FormValidator.Models.Form key -> List String"
      },
      {
        "name": "init",
        "comment": " Initialize a new form field. ",
        "type": "key -> FormValidator.Models.Validators -> FormValidator.Models.Field key"
      },
      {
        "name": "isFieldInvalid",
        "comment": " Answer if field is invalid. ",
        "type": "key -> FormValidator.Models.Form key -> Bool"
      },
      {
        "name": "isFormInvalid",
        "comment": " Answer if form is invalid. ",
        "type": "FormValidator.Models.Form key -> Bool"
      },
      {
        "name": "updateAndValidateValue",
        "comment": " Answer single field value and validate it. ",
        "type": "key -> FormValidator.Models.Value -> FormValidator.Models.Form key -> FormValidator.Models.Form key"
      },
      {
        "name": "updateAndValidateValues",
        "comment": " Answer multiple field values and validate each. ",
        "type": "key -> FormValidator.Models.Values -> FormValidator.Models.Form key -> FormValidator.Models.Form key"
      },
      {
        "name": "updateValue",
        "comment": " Update single field value without validation. ",
        "type": "key -> FormValidator.Models.Value -> FormValidator.Models.Form key -> FormValidator.Models.Form key"
      },
      {
        "name": "updateValues",
        "comment": " Update multiple field values without validation. ",
        "type": "key -> FormValidator.Models.Values -> FormValidator.Models.Form key -> FormValidator.Models.Form key"
      },
      {
        "name": "validateField",
        "comment": " Validate field. ",
        "type": "key -> FormValidator.Models.Form key -> FormValidator.Models.Form key"
      },
      {
        "name": "validateForm",
        "comment": " Validate form (including all fields). ",
        "type": "FormValidator.Models.Form key -> FormValidator.Models.Form key"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "FormValidator.Models",
    "comment": "\n\nForm Validator component models.\n\n@docs Form, Field, Validators, Validator, Values, Value, Errors, Error\n\n",
    "aliases": [
      {
        "name": "Error",
        "comment": " The error message of an invalid value. ",
        "args": [],
        "type": "Maybe.Maybe String"
      },
      {
        "name": "Errors",
        "comment": " The error messages of invalid values. ",
        "args": [],
        "type": "List FormValidator.Models.Error"
      },
      {
        "name": "Field",
        "comment": "\nThe form field, identified by unique key, which stores a value, validators of that value,\nand validation errors (if any).\n",
        "args": [
          "key"
        ],
        "type": "{ key : key , value : String , validators : FormValidator.Models.Validators , errors : FormValidator.Models.Errors }"
      },
      {
        "name": "Form",
        "comment": " The form model which stores a list of fields for input and validation. ",
        "args": [
          "key"
        ],
        "type": "List (FormValidator.Models.Field key)"
      },
      {
        "name": "Validator",
        "comment": " Validates value as either an error string (invalid) or nothing at all (valid). ",
        "args": [],
        "type": "String -> Maybe.Maybe String"
      },
      {
        "name": "Validators",
        "comment": " Convenience model for list of validators. ",
        "args": [],
        "type": "List FormValidator.Models.Validator"
      },
      {
        "name": "Value",
        "comment": " A value to be validated. ",
        "args": [],
        "type": "String"
      },
      {
        "name": "Values",
        "comment": " A list of values to be validated. ",
        "args": [],
        "type": "List FormValidator.Models.Value"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "FormValidator.Patterns",
    "comment": "\n\nForm Validator regular expression patterns.\n\n@docs blank, email\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "blank",
        "comment": " Answer regular expression for blank string. ",
        "type": "Regex.Regex"
      },
      {
        "name": "email",
        "comment": " Answer regular expression for email address. ",
        "type": "Regex.Regex"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]