[
  {
    "name": "SVGTextSizing",
    "comment": " Provides functionality to convert text into SVG paths.\n\nThis is implemented on top of the opentype.js library, and uses ports to handle\nthe native code interaction with this library, even though the text conversion\nfunctions routines are pure functions and do not really need to work asynchronously.\n\nThe `update` cycle for this module must be linked into code that makes use of it,\nincluding its subscriptions.\n\n\n# Text to path conversion cycle\n\n@docs Model, Msg, subscriptions, init, update, convertTextToSvg\n\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " The internal state of the text conversion. This keeps track of which diagrams are\nstill to complete, and which `PathSpec`s.\n",
        "args": [
          "a"
        ],
        "type": "{ diagramsToSize : Dict.Dict Int (TextDiagrams.TextDiagram a) , textToSize : MultiDict.MultiDict Int TextDiagrams.PathSpec , id : Int }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Describes the text rendering outcome events from the conversion ports.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "convertTextToSvg",
        "comment": " Given a list of diagrams that need their text converted to SVG, and the current\nstate of the converter Model, produces a new model and a set of commands for the\nrequests on the text to SVG port, to do the conversion work. The new model contains\na set of diagrams needing to be sized, updated with the list of diagram requests to\nbe processed.\n",
        "type": "SVGTextSPI.TextToSVGPort SVGTextSizing.Msg -> List (TextDiagrams.TextDiagram a) -> SVGTextSizing.Model a -> ( SVGTextSizing.Model a, Platform.Cmd.Cmd SVGTextSizing.Msg )"
      },
      {
        "name": "init",
        "comment": " Createa a new empty initial state for the text conversion.\n",
        "type": "SVGTextSizing.Model a"
      },
      {
        "name": "subscriptions",
        "comment": " Defines the subscription needed to listen for responses on the text conversion response port.\n",
        "type": "SVGTextSPI.TextToSVGResponsePort SVGTextSizing.Msg -> SVGTextSizing.Model a -> Platform.Sub.Sub SVGTextSizing.Msg"
      },
      {
        "name": "update",
        "comment": " Handles updates from the text to SVG return port, that provide text converted to SVG\nwith sizing information.\n",
        "type": "SVGTextSizing.Msg -> SVGTextSizing.Model a -> ( SVGTextSizing.Model a , Platform.Cmd.Cmd SVGTextSizing.Msg , List (TextDiagrams.TextDiagram a) )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "SVGTextRendering",
    "comment": " Renders text as an SVG `text` element, or as a `path` element, with a common\ntype for these text rendering methods.\n\n@docs TextRenderFunc, textAsPath, textAsText, TextAlignment\n\n",
    "aliases": [
      {
        "name": "TextRenderFunc",
        "comment": " A type alias for the text rendering functions, as their types are quite longt.\n",
        "args": [
          "msg"
        ],
        "type": "TextDiagrams.PathSpec -> EveryDict.EveryDict TextDiagrams.PathSpec TextDiagrams.Path -> SVGTextRendering.TextAlignment -> Float -> Float -> List (TypedSvg.Core.Attribute msg) -> TypedSvg.Core.Svg msg"
      }
    ],
    "types": [
      {
        "name": "TextAlignment",
        "comment": " The possible horizontal alignments for text.\n",
        "args": [],
        "cases": [
          [
            "LeftAlign",
            []
          ],
          [
            "CenterAlign",
            []
          ],
          [
            "RightAlign",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "textAsPath",
        "comment": " Renders a PathSpec as an SVG path.\nThis will be geometrically accurate and stable under motion, but the text rendering will not be hinted\nand look a bit rough. Use this when animating text.\n",
        "type": "SVGTextRendering.TextRenderFunc msg"
      },
      {
        "name": "textAsText",
        "comment": " Renders a PathSpec as SVG text rendered by the browser.\nThis will be hinted and rendered for maximum legibility. It will look crisp and clear\n. It will have geometric aberations that show up under animation as a jittering about\nof the text. Use this for static text.\n",
        "type": "SVGTextRendering.TextRenderFunc msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "SVGTextSPI",
    "comment": " Ports needed to request/subscribe to text to SVG conversion events.\n\n@docs TextToSVGPort, TextToSVGResponsePort, TextToSVGRequest, TextPath\n\n",
    "aliases": [
      {
        "name": "TextPath",
        "comment": " Defines the response to a request to convert text to SVG, including the\nSVG path data and metrics for the text.\n",
        "args": [],
        "type": "{ id : Int , baseline : Float , width : Float , height : Float , ascender : Float , descender : Float , pathData : String , request : SVGTextSPI.TextToSVGRequest }"
      },
      {
        "name": "TextToSVGPort",
        "comment": " Defines the type of the text-to-svg port.\n",
        "args": [
          "msg"
        ],
        "type": "SVGTextSPI.TextToSVGRequest -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "TextToSVGRequest",
        "comment": " Defines the fields needed to make a request to convert text to SVG.\n",
        "args": [],
        "type": "{ id : Int , text : String , font : String , fontSize : Float , kerning : Bool , letterSpacing : Float }"
      },
      {
        "name": "TextToSVGResponsePort",
        "comment": " Defines the type of the text-to-svg response port.\n",
        "args": [
          "msg"
        ],
        "type": "(SVGTextSPI.TextPath -> msg) -> Platform.Sub.Sub msg"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "TextDiagrams",
    "comment": " The types for SVG text diagrams.\n\n@docs TextDiagram, Path, PathSpec, Options\n\n",
    "aliases": [
      {
        "name": "Options",
        "comment": " Options that can be set to control how text is rendered into SVG paths.\n",
        "args": [],
        "type": "{ kerning : Maybe.Maybe Bool, letterSpacing : Maybe.Maybe Float }"
      },
      {
        "name": "Path",
        "comment": " Encodes a string as an SVG path describing its outline, which can be used to\ndraw the text in SVG.\nThe width of the text is also given.\n",
        "args": [],
        "type": "{ width : Float, path : String }"
      },
      {
        "name": "PathSpec",
        "comment": " Describes some text as a String along with a named font and size. This is sufficient\nto describe the SVG path for the text uniquely.\n",
        "args": [],
        "type": "{ text : String, font : String, fontSize : Float }"
      },
      {
        "name": "TextDiagram",
        "comment": " Denotes a diagram containing text with a function that can be used to correctly\ncalculate the width of all text in the diagram.\n",
        "args": [
          "a"
        ],
        "type": "{ a | labels : List TextDiagrams.PathSpec, pathsForLabels : EveryDict.EveryDict TextDiagrams.PathSpec TextDiagrams.Path }"
      }
    ],
    "types": [],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  }
]