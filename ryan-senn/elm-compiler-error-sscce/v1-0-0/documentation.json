[{"name":"Toasters","comment":" Module to add Toasters to your app\n\n\n# Initialise and update\n\n@docs Model, init, Msg, update, merge\n\n\n# Subscription\n\n@docs subscription\n\n\n# Add toasters\n\n@docs addGreen, addRed\n\n\n# Add to your view\n\n@docs view\n\n","unions":[{"name":"Model","comment":" Add a Toasters.Model to your model.\n\n    type alias MyModel =\n        { toasters : Toasters.Model\n        }\n\n","args":[],"cases":[]},{"name":"Msg","comment":" Add a Toasters.Msg to your Msg.\n\n    type MyMsg\n        = ToastersMsg Toasters.Msg\n\n","args":[],"cases":[]}],"aliases":[],"values":[{"name":"addGreen","comment":" Add to your subscription function.\n\n    myUpdate : Msg -> Model -> ( Model, Cmd Msg )\n    myUpdate msg model =\n        case msg of\n            SavedSuccessfully ->\n                { model\n                    | isSaving = False\n                    , toasters = Toasters.addGreen \"Data saved Successfully :)\" model.toasters\n                }\n                    ! []\n\n","type":"String.String -> Toasters.Model -> Toasters.Model"},{"name":"addRed","comment":" Add to your subscription function.\n\n    myUpdate : Msg -> Model -> ( Model, Cmd Msg )\n    myUpdate msg model =\n        case msg of\n            SavingFailed ->\n                { model\n                    | isSaving = False\n                    , toasters = Toasters.addRed \"Data could not be saved :(\" model.toasters\n                }\n                    ! []\n\n","type":"String.String -> Toasters.Model -> Toasters.Model"},{"name":"init","comment":" Add a Toasters.Model to your model.\n\n    myInitialModel : MyModel\n    myInitialModel =\n        { toasters = Toasters.init\n        }\n\n","type":"Toasters.Model"},{"name":"merge","comment":" Merge multiple toaster models into one.\nUseful when Return types that carry their own Toasters.Model want to merge back into the application Toasters.Model\n\n    { appModel | toasters = Toasters.merge return.toasters appModel.toasters }\n\n","type":"Toasters.Model -> Toasters.Model -> Toasters.Model"},{"name":"subscription","comment":" Add to your subscription function.\n\n    subscriptions : Model -> Sub Msg\n    subscriptions model =\n        Sub.batch\n            [ Toasters.subscription model.toasters |> Sub.map Msg.ToastersMsg\n            ]\n\n","type":"Toasters.Model -> Platform.Sub.Sub Toasters.Msg"},{"name":"update","comment":" Use in your update function.\n\n    myUpdate : Msg -> Model -> ( Model, Cmd Msg )\n    myUpdate msg model =\n        case msg of\n            ToastersMsg toastersMsg ->\n                { model | toasters = Toasters.update toastersMsg model.toasters } ! []\n\n","type":"Toasters.Msg -> Toasters.Model -> Toasters.Model"},{"name":"view","comment":" Add to your view function.\n\n    div\n        []\n        [ Toasters.view model.toasters\n            |> Html.map ToastersMsg\n        , div\n            []\n            [ text \"My Cool App\" ]\n        ]\n\n","type":"Toasters.Model -> Html.Html Toasters.Msg"}],"binops":[]}]