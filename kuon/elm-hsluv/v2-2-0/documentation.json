[{"name":"HSLuv","comment":" Convert color between HSLuv and RGB spaces\n\nThis package uses an internal color representation to limit the number of\nconversion to the minimum.\n\nIf you create a color with the `hsluv` constructor and then manipulate it with\nthe `HSLuv.Manipulate` module, there will be no new conversion.\n\n\n# Colors\n\n@docs Color\n\n\n# Create colors (constructors)\n\n@docs hsluv, hsluv360, rgb, rgb255\n\n\n# Convert colors (extractors)\n\n@docs toHsluv, toHsluv360, toRgb, toRgb255\n\n\n# Low level functions\n\n@docs hsluvToRgb, hpluvToRgb, rgbToHsluv, rgbToHpluv\n\n\n# Low level intermediate conversion functions\n\n@docs lchToLuv, luvToLch, xyzToRgb, rgbToXyz, xyzToLuv, luvToXyz\n@docs hsluvToLch, lchToHsluv, hpluvToLch, lchToHpluv\n\n","unions":[],"aliases":[{"name":"Color","comment":" Opaque color type\n","args":[],"type":"HSLuv.Color.Color"}],"values":[{"name":"hpluvToLch","comment":" `hpluvToLch` convert HPLuv components to LCH\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"hpluvToRgb","comment":" `hpluvToRgb` convert HSLuv components to RGB\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"hsluv","comment":" `hsluv` create a Color with normalized HSLuv\ncomponents (0->1) and an alpha channel\n","type":"{ hue : Basics.Float, saturation : Basics.Float, lightness : Basics.Float, alpha : Basics.Float } -> HSLuv.Color"},{"name":"hsluv360","comment":" `hsluv360` create a Color with HSLuv\ncomponents and an alpha channel\n\n    - hue range is 0->360\n    - saturation range is 0->100\n    - lightness range is 0->100\n    - alpha range is 0->1\n\n","type":"{ hue : Basics.Float, saturation : Basics.Float, lightness : Basics.Float, alpha : Basics.Float } -> HSLuv.Color"},{"name":"hsluvToLch","comment":" `hsluvToLch` convert HSLuv components to LCH\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"hsluvToRgb","comment":" `hsluvToRgb` convert HSLuv components to RGB\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"lchToHpluv","comment":" `lchToHpluv` convert LCH components to HPLuv\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"lchToHsluv","comment":" `lchToHsluv` convert LCH components to HSLuv\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"lchToLuv","comment":" `lchToLuv` convert LCH components to LUV\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"luvToLch","comment":" `luvToLch` convert LUV components to LCH\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"luvToXyz","comment":" `luvToXyz` convert LUV components to XYZ\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"rgb","comment":" `rgb` create a Color with normalized RGB components (0->1)\nand an alpha channel\n","type":"{ red : Basics.Float, green : Basics.Float, blue : Basics.Float, alpha : Basics.Float } -> HSLuv.Color"},{"name":"rgb255","comment":" `rgb255` create a Color with RGB components (0->255) and an alpha channel (0->1)\n","type":"{ red : Basics.Int, green : Basics.Int, blue : Basics.Int, alpha : Basics.Float } -> HSLuv.Color"},{"name":"rgbToHpluv","comment":" `rgbToHpluv` convert RGB components to HSLuv\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"rgbToHsluv","comment":" `rgbToHsluv` convert RGB components to HSLuv\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"rgbToXyz","comment":" `rgbToXyz` convert RGB components to XYZ\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"toHsluv","comment":" `toHsluv` extract the normalized components of a color in the HSLuv format\n","type":"HSLuv.Color -> { hue : Basics.Float, saturation : Basics.Float, lightness : Basics.Float, alpha : Basics.Float }"},{"name":"toHsluv360","comment":" `toHsluv360` extract the components of a color in the HSLuv format\n\n    - hue range is 0->360\n    - saturation range is 0->100\n    - lightness range is 0->100\n    - alpha range is 0->1\n\n","type":"HSLuv.Color -> { hue : Basics.Float, saturation : Basics.Float, lightness : Basics.Float, alpha : Basics.Float }"},{"name":"toRgb","comment":" `toRgb` extract the normalized components of a color in the RGBA format\n","type":"HSLuv.Color -> { red : Basics.Float, green : Basics.Float, blue : Basics.Float, alpha : Basics.Float }"},{"name":"toRgb255","comment":" `toRgb255` extract the components of a color in the RGBA format (0->255)\n","type":"HSLuv.Color -> { red : Basics.Int, green : Basics.Int, blue : Basics.Int, alpha : Basics.Float }"},{"name":"xyzToLuv","comment":" `xyzToLuv` convert XYZ components to LUV\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"},{"name":"xyzToRgb","comment":" `xyzToRgb` convert XYZ components to RGB\n","type":"HSLuv.Vec3 -> HSLuv.Vec3"}],"binops":[]},{"name":"HSLuv.Manipulate","comment":" Manipulate colors\n\nThis module let you manipulate the `Color` type.\n\n\n# Set components\n\n@docs setRed, setGreen, setBlue, setHue, setLightness, setSaturation\n@docs setAlpha\n\n\n# Multiply components\n\n@docs multRed, multGreen, multBlue, multHue, multLightness\n@docs multSaturation, multAlpha\n\n\n# Map components\n\n@docs mapRed, mapGreen, mapBlue, mapHue, mapLightness\n@docs mapSaturation, mapAlpha\n\n","unions":[],"aliases":[],"values":[{"name":"mapAlpha","comment":" Map the alpha with the given function. The result is clamped in the\n0->1 range.\n","type":"(Basics.Float -> Basics.Float) -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"mapBlue","comment":" Map the blue channel with the given function. The result is clamped in the\n0->1 range.\n","type":"(Basics.Float -> Basics.Float) -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"mapGreen","comment":" Map the green channel with the given function. The result is clamped in the\n0->1 range.\n","type":"(Basics.Float -> Basics.Float) -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"mapHue","comment":" Map the hue with the given function. The result is clamped in the\n0->1 range.\n","type":"(Basics.Float -> Basics.Float) -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"mapLightness","comment":" Map the lightness with the given function. The result is clamped in the\n0->1 range.\n","type":"(Basics.Float -> Basics.Float) -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"mapRed","comment":" Map the red channel with the given function. The result is clamped in the\n0->1 range.\n","type":"(Basics.Float -> Basics.Float) -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"mapSaturation","comment":" Map the saturation with the given function. The result is clamped in the\n0->1 range.\n","type":"(Basics.Float -> Basics.Float) -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"multAlpha","comment":" Multiply the alpha by the give factor. The result is clamped in the\n0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"multBlue","comment":" Multiply the blue channel by the give factor. The result is clamped in the\n0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"multGreen","comment":" Multiply the green channel by the give factor. The result is clamped in the\n0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"multHue","comment":" Multiply the hue by the give factor. The result is clamped in the\n0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"multLightness","comment":" Multiply the lightness by the give factor. The result is clamped in the\n0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"multRed","comment":" Multiply the red channel by the give factor. The result is clamped in the\n0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"multSaturation","comment":" Multiply the saturation by the give factor. The result is clamped in the\n0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"setAlpha","comment":" Set the alpha of the color. Requires a value in the 0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"setBlue","comment":" Set the blue channel of the color. Requires a value in the 0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"setGreen","comment":" Set the green channel of the color. Requires a value in the 0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"setHue","comment":" Set the hue of the color. Requires a value in the 0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"setLightness","comment":" Set the lightness of the color. Requires a value in the 0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"setRed","comment":" Set the red channel of the color. Requires a value in the 0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"},{"name":"setSaturation","comment":" Set the saturation of the color. Requires a value in the 0->1 range.\n","type":"Basics.Float -> HSLuv.Color.Color -> HSLuv.Color.Color"}],"binops":[]}]