[
  {
    "name": "Facet.Plot",
    "comment": "\n@docs Plot, PlotError\n\n@docs plot, size, width, height\n\n@docs layer\n\n@docs facetGrid, facetRow, facetRowWrap, facetColumn, facetColumnWrap, facetRowFormat,facetColumnFormat\n\n@docs xAxis, yAxis\n\n@docs compile, compileWithTheme\n",
    "aliases": [],
    "types": [
      {
        "name": "Plot",
        "comment": " A `Plot` allows you to combine several layers of `Encodings` along with\n    the corresponding `Legends` and `Axis`.\n\n    In addition, you can specify how the plot should be facetted to create\n    [small multiples](https://en.wikipedia.org/wiki/Small_multiple).\n",
        "args": [
          "data",
          "xdomain",
          "ydomain",
          "facetRow",
          "facetColumn"
        ],
        "cases": []
      },
      {
        "name": "PlotError",
        "comment": " Reasons why plot compilation may have failed\n",
        "args": [],
        "cases": [
          [
            "NoXAxis",
            []
          ],
          [
            "NoYAxis",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "compile",
        "comment": " Compile a plot using the default `Theme`.\n",
        "type": "Facet.Plot.Plot data xdomain ydomain facetRow facetColumn -> List data -> Result.Result (List Facet.Plot.PlotError) ( Facet.Scenegraph.ViewBox, Facet.Scenegraph.Scenegraph )"
      },
      {
        "name": "compileWithTheme",
        "comment": " Compile a plot with a custom `Theme`.\n",
        "type": "Facet.Theme.Theme -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn -> List data -> Result.Result (List Facet.Plot.PlotError) ( Facet.Scenegraph.ViewBox, Facet.Scenegraph.Scenegraph )"
      },
      {
        "name": "facetColumn",
        "comment": " Generate a column of small multiples using the same scale and axes, allowing\n    them to be easily compared.\n",
        "type": "Facet.Internal.Field.Field data comparableColumn -> Facet.Plot.Plot data xdomain ydomain a b -> Facet.Plot.Plot data xdomain ydomain a comparableColumn"
      },
      {
        "name": "facetColumnFormat",
        "comment": " ",
        "type": "(facetColumn -> String) -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn"
      },
      {
        "name": "facetColumnWrap",
        "comment": " Generate columns of small multiples, with a maximum height, using the same\n    scale and axes, allowing them to be easily compared.\n",
        "type": "Facet.Internal.Field.Field data comparableColumn -> Int -> Facet.Plot.Plot data xdomain ydomain a b -> Facet.Plot.Plot data xdomain ydomain a comparableColumn"
      },
      {
        "name": "facetGrid",
        "comment": " Generate a grid of small multiples using the same scale and axes\n    , allowing them to be easily compared.\n",
        "type": "Facet.Internal.Field.Field data comparableRow -> Facet.Internal.Field.Field data comparableColumn -> Facet.Plot.Plot data xdomain ydomain a b -> Facet.Plot.Plot data xdomain ydomain comparableRow comparableColumn"
      },
      {
        "name": "facetRow",
        "comment": " Generate a row of small multiples using the same scale and axes, allowing\n    them to be easily compared.\n",
        "type": "Facet.Internal.Field.Field data comparableRow -> Facet.Plot.Plot data xdomain ydomain a b -> Facet.Plot.Plot data xdomain ydomain comparableRow b"
      },
      {
        "name": "facetRowFormat",
        "comment": " Specify how the small multiple labels for each column in a row of\n    small multiples should be formatted\n",
        "type": "(facetRow -> String) -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn"
      },
      {
        "name": "facetRowWrap",
        "comment": " Generate rows of small multiples, with a maximum length, using the same\n    scale and axes, allowing them to be easily compared.\n",
        "type": "Facet.Internal.Field.Field data comparableRow -> Int -> Facet.Plot.Plot data xdomain ydomain a b -> Facet.Plot.Plot data xdomain ydomain comparableRow b"
      },
      {
        "name": "height",
        "comment": " Specify the user-space height of a plot\n",
        "type": "Float -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn"
      },
      {
        "name": "layer",
        "comment": " ",
        "type": "Facet.Internal.Encoding.Encoding data xdomain ydomain -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn"
      },
      {
        "name": "plot",
        "comment": " An empty `Plot` with an optional title\n",
        "type": "Maybe.Maybe String -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn"
      },
      {
        "name": "size",
        "comment": " Specify the user-space width and height of a plot\n",
        "type": "Float -> Float -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn"
      },
      {
        "name": "width",
        "comment": " Specify the user-space width of a plot\n",
        "type": "Float -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn"
      },
      {
        "name": "xAxis",
        "comment": " ",
        "type": "Facet.Axis.Axis Facet.Internal.Axis.Vertical xdomain -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn"
      },
      {
        "name": "yAxis",
        "comment": " ",
        "type": "Facet.Axis.Axis Facet.Internal.Axis.Horizontal ydomain -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn -> Facet.Plot.Plot data xdomain ydomain facetRow facetColumn"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Facet.Encoding",
    "comment": "\n\n# Encoding\n@docs Encoding\n\n## Arc\n@docs arc\n\n@docs innerRadius, padAngle\n\n## Area\n@docs vArea, hArea\n\n## Line\n@docs line\n\n## Polygon\n@docs polygon\n\n## Rect\n@docs rect, bar\n@docs cornerRadius\n\n## Rule\n@docs rule\n\n## Symbol\n@docs symbol , point, arrow, cross, square, diamond, trangleUp, triangleDown, triangleLeft, triangleRight , shape\n\n@docs angle\n\n@docs size,sizeConstant\n\n## Text\n@docs text\n@docs relativePosition\n\n## Trail\n@docs trail\n\n## Fill\n@docs fill,fillConstant, fillOpacity, fillOpacityConstant\n\n\n## Stroke\n@docs stroke, strokeConstant,  strokeOpacity,strokeOpacityConstant, strokeWidth, strokeWidthConstant, strokeDash,  strokeDashConstant\n\n@docs tooltip\n\n",
    "aliases": [
      {
        "name": "Encoding",
        "comment": "\n    # Encoding\n\n    An `Encoding` is a means of encoding data as visual mark by combining\n    several `Channel`s to represent variaus attributes of that visual mark.\n\n    A description of each encoding along with the required and optional `Channels`\n    is given below.\n\n    ## Arc\n\n    A cicular arc.\n\n    ### Required channels\n\n    - x position (`PositionalChannel`)\n    - y position (`PositionalChannel`)\n    - start angle in Radians (`FloatChannel`)\n    - end angle in Radians (`FloatChannel`)\n    - outer radius in user-space pixels (`FloatChannel`)\n\n    ### Optional channels\n\n    - inner radius in user-space pixels (`FloatChannel`)\n    - corner radius in user-space pixels (`FloatChannel`)\n    - fill color (`ColorChannel`)\n    - fill opacity, between 0 and 1 (`FloatChannel`)\n    - stroke color (`ColorChannel`)\n    - stroke opacity, between 0 and 1 (`FloatChannel`)\n    - stroke width in user-space pixels (`FloatChannel`)\n    - stroke dash (`StrokeDashChannel`)\n    - tooltip (`TextChannel`)\n\n    ## Area\n\n    Filled area with either vertical or horizontal orientation.\n\n    ### Required channels\n\n    - x positions (`PositionalChannel`)\n    - y positions (`PositionalChannel`)\n\n    You must also provide an interpolation method and the preferred behaviour\n    when missing values are encountered\n\n    ### Optional channels\n\n    - fill color (`ColorChannel`)\n    - fill opacity, between 0 and 1 (`FloatChannel`)\n    - stroke color (`ColorChannel`)\n    - stroke opacity, between 0 and 1 (`FloatChannel`)\n    - stroke width in user-space pixels (`FloatChannel`)\n    - stroke dash (`StrokeDashChannel`)\n    - tooltip (`TextChannel`)\n\n    ## Line\n\n    Stroked lines.\n\n    ### Required channels\n\n    - x positions (`PositionalChannel`)\n    - y positions (`PositionalChannel`)\n\n    You must also provide an interpolation method and the preferred behaviour\n    when missing values are encountered\n\n    ### Optional channels\n\n    - stroke color (`ColorChannel`)\n    - stroke opacity, between 0 and 1 (`FloatChannel`)\n    - stroke width in user-space pixels (`FloatChannel`)\n    - stroke dash (`StrokeDashChannel`)\n    - tooltip (`TextChannel`)\n\n    ## Polygon\n\n    Arbitrary filled polygons.\n\n    ### Required channels\n\n    - x positions (`PositionalChannel`)\n    - y positions (`PositionalChannel`)\n\n    You must also provide an interpolation method and the preferred behaviour\n    when missing values are encountered\n\n    ### Optional channels\n\n    - fill color (`ColorChannel`)\n    - fill opacity, between 0 and 1 (`FloatChannel`)\n    - stroke color (`ColorChannel`)\n    - stroke opacity, between 0 and 1 (`FloatChannel`)\n    - stroke width in user-space pixels (`FloatChannel`)\n    - stroke dash (`StrokeDashChannel`)\n    - tooltip (`TextChannel`)\n\n    ## Rect\n\n    Filled rectangles.\n\n    ### Required channels\n\n    Either\n    - primary and secondary x and y positions\n    or\n    - primary x and y positions, width and height\n\n    ### Optional channels\n\n    - corner radius in user-space pixels (`FloatChannel`)\n    - fill color (`ColorChannel`)\n    - fill opacity, between 0 and 1 (`FloatChannel`)\n    - stroke color (`ColorChannel`)\n    - stroke opacity, between 0 and 1 (`FloatChannel`)\n    - stroke width in user-space pixels (`FloatChannel`)\n    - stroke dash (`StrokeDashChannel`)\n    - tooltip (`TextChannel`)\n\n    ## Rule\n\n    Strkoed line segments.\n\n    ### Required channels\n\n    - primary and secondary x positions (`PositionalChannel`)\n    - primary and secondary y positions (`PositionalChannel`)\n\n    ### Optional channels\n\n    - stroke color (`ColorChannel`)\n    - stroke opacity, between 0 and 1 (`FloatChannel`)\n    - stroke width in user-space pixels (`FloatChannel`)\n    - stroke dash (`StrokeDashChannel`)\n    - tooltip (`TextChannel`)\n\n    ## Symbol\n\n    Plotting symbols, including circles, squares and other shapes.\n\n    ### Required channels\n\n    - shape (`ShapeChannel`)\n    - x position (`PositionalChannel`)\n    - y position (`PositionalChannel`)\n\n    ### Optional channels\n\n    - size in user-space pixels squared (`FloatChannel`)\n    - angle in Radians (`FloatChannel`)\n    - fill color (`ColorChannel`)\n    - fill opacity, between 0 and 1 (`FloatChannel`)\n    - stroke color (`ColorChannel`)\n    - stroke opacity, between 0 and 1 (`FloatChannel`)\n    - stroke width in user-space pixels (`FloatChannel`)\n    - stroke dash (`StrokeDashChannel`)\n    - tooltip (`TextChannel`)\n\n    ## Text\n\n    Text labels with configurable fonts, alignment and angle.\n\n    ### Required Channels\n\n    - text (`TextChannel`)\n    - x position (`PositionalChannel`)\n    - y position (`PositionalChannel`)\n\n\n    ### Optional channels\n\n    - size in user-space pixels squared (`FloatChannel`)\n    - angle in Radians (`FloatChannel`)\n    - fill color (`ColorChannel`)\n    - fill opacity, between 0 and 1 (`FloatChannel`)\n    - stroke color (`ColorChannel`)\n    - stroke opacity, between 0 and 1 (`FloatChannel`)\n    - stroke width in user-space pixels (`FloatChannel`)\n    - stroke dash (`StrokeDashChannel`)\n    - tooltip (`TextChannel`)\n\n    ## Trail\n\n    Filled lines with varying width.\n\n    ### Required Channels\n\n    - widths (`FloatChannel`)\n    - x positions (`PositionalChannel`)\n    - y positions (`PositionalChannel`)\n\n\n    ### Optional channels\n\n    - fill color (`ColorChannel`)\n    - fill opacity, between 0 and 1 (`FloatChannel`)\n    - tooltip (`TextChannel`)\n\n",
        "args": [
          "data",
          "xdomain",
          "ydomain"
        ],
        "type": "Facet.Internal.Encoding.Encoding data xdomain ydomain"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "angle",
        "comment": " ",
        "type": "Facet.Channel.FloatChannel data -> Facet.Encoding.Encoding data xdomain ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "arc",
        "comment": " Circular arc.\n",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Channel.FloatChannel data -> Facet.Channel.FloatChannel data -> Facet.Channel.FloatChannel data -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "arrow",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "bar",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Float -> Facet.Channel.PositionalChannel data Float -> Facet.Encoding.Encoding data xdomain Float"
      },
      {
        "name": "cornerRadius",
        "comment": " ",
        "type": "Facet.Channel.FloatChannel data -> Facet.Internal.Encoding.Encoding data xdomain ydomain -> Facet.Internal.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "cross",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "diamond",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "fill",
        "comment": " ",
        "type": "Facet.Channel.ColorChannel data -> Facet.Encoding.Encoding data xdomain ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "fillConstant",
        "comment": " ",
        "type": "Color.Color -> Facet.Internal.Encoding.Encoding data xdomain ydomain -> Facet.Internal.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "fillOpacity",
        "comment": " ",
        "type": "Facet.Channel.FloatChannel data -> Facet.Encoding.Encoding data xdomain ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "fillOpacityConstant",
        "comment": " ",
        "type": "Float -> Facet.Internal.Encoding.Encoding data xdomain ydomain -> Facet.Internal.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "hArea",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data number -> Facet.Scenegraph.Interpolate.Interpolate -> Facet.Scenegraph.Mark.Behaviour -> Facet.Encoding.Encoding data xdomain number"
      },
      {
        "name": "innerRadius",
        "comment": " ",
        "type": "Facet.Channel.FloatChannel data -> Facet.Encoding.Encoding data xdomain ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "line",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Scenegraph.Interpolate.Interpolate -> Facet.Scenegraph.Mark.Behaviour -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "padAngle",
        "comment": " ",
        "type": "Facet.Channel.FloatChannel data -> Facet.Encoding.Encoding data xdomain ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "point",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "polygon",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data number -> Facet.Scenegraph.Interpolate.Interpolate -> Facet.Scenegraph.Mark.Behaviour -> Facet.Encoding.Encoding data xdomain number"
      },
      {
        "name": "rect",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "relativePosition",
        "comment": " ",
        "type": "Float -> Float -> Facet.Encoding.Encoding data xdomain ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "rule",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "shape",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Path.LowLevel.SubPath -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "size",
        "comment": " ",
        "type": "Facet.Channel.FloatChannel data -> Facet.Encoding.Encoding data xdomain ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "sizeConstant",
        "comment": " ",
        "type": "Float -> Facet.Internal.Encoding.Encoding data xdomain ydomain -> Facet.Internal.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "square",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "stroke",
        "comment": " ",
        "type": "Facet.Channel.ColorChannel data -> Facet.Encoding.Encoding data xdomain ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "strokeConstant",
        "comment": " ",
        "type": "Color.Color -> Facet.Internal.Encoding.Encoding data xdomain ydomain -> Facet.Internal.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "strokeDash",
        "comment": " ",
        "type": "Facet.Channel.StrokeDashChannel data -> Facet.Encoding.Encoding data xdomain ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "strokeDashConstant",
        "comment": " ",
        "type": "Facet.Scenegraph.Stroke.StrokeDash -> Facet.Internal.Encoding.Encoding data xdomain ydomain -> Facet.Internal.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "strokeOpacity",
        "comment": " ",
        "type": "Facet.Channel.FloatChannel data -> Facet.Encoding.Encoding data xdomain ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "strokeOpacityConstant",
        "comment": " ",
        "type": "Float -> Facet.Internal.Encoding.Encoding data xdomain ydomain -> Facet.Internal.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "strokeWidth",
        "comment": " ",
        "type": "Facet.Channel.FloatChannel data -> Facet.Encoding.Encoding data xdomain ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "strokeWidthConstant",
        "comment": " ",
        "type": "Float -> Facet.Internal.Encoding.Encoding data xdomain ydomain -> Facet.Internal.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "symbol",
        "comment": " ",
        "type": "Facet.Channel.ShapeChannel data -> Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "text",
        "comment": " ",
        "type": "Facet.Channel.TextChannel data -> Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "tooltip",
        "comment": " ",
        "type": "Facet.Channel.TextChannel data -> Facet.Encoding.Encoding data xdomain ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "trail",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Channel.FloatChannel data -> Facet.Scenegraph.Mark.Behaviour -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "trangleUp",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "triangleDown",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "triangleLeft",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "triangleRight",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data ydomain -> Facet.Encoding.Encoding data xdomain ydomain"
      },
      {
        "name": "vArea",
        "comment": " ",
        "type": "Facet.Channel.PositionalChannel data xdomain -> Facet.Channel.PositionalChannel data number -> Facet.Scenegraph.Interpolate.Interpolate -> Facet.Scenegraph.Mark.Behaviour -> Facet.Encoding.Encoding data xdomain number"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Facet.Channel",
    "comment": "\n\n# Channel\n\nA `Channel` is a means representing data as some attribute of a visual mark.\n\n## Positional Channel\n@docs PositionalChannel, positional, positionalCompareWith\n\n@docs ChannelWithLegend, channel, channelCompareWith\n\n## Angle Channel\n@docs AngleChannel, angle, angleCompareWith\n\n## Color Channel\n@docs ColorChannel, color, colorCompareWith\n\n## Float Channel\n@docs FloatChannel, float, floatCompareWith\n\n## Int Channel\n@docs IntChannel, int, intCompareWith\n\n## Shape Channel\n@docs ShapeChannel, shape, shapeCompareWith\n\n## Text Channel\n@docs TextChannel , text, textCompareWith\n\n## Stroke-dash Channel\n@docs StrokeDashChannel, strokeDash, strokeDashCompareWith\n\n",
    "aliases": [
      {
        "name": "AngleChannel",
        "comment": " An `AngleChannel` is used to encode data as the rotation of a visual mark.\n",
        "args": [
          "data"
        ],
        "type": "Facet.Internal.Channel.AngleChannel data"
      },
      {
        "name": "ChannelWithLegend",
        "comment": " ",
        "args": [
          "data",
          "range"
        ],
        "type": "Facet.Internal.Channel.ChannelWithLegend data range"
      },
      {
        "name": "ColorChannel",
        "comment": " A `ColorChannel` is used to encode data as either the fill color or stroke color\nof a visual mark.\n",
        "args": [
          "data"
        ],
        "type": "Facet.Internal.Channel.ColorChannel data"
      },
      {
        "name": "FloatChannel",
        "comment": " A `FloatChannel` is used to encode data as some non-positional numeric attribute\nof a visual mark e.g. stroke width, size, font size.\n",
        "args": [
          "data"
        ],
        "type": "Facet.Internal.Channel.FloatChannel data"
      },
      {
        "name": "IntChannel",
        "comment": " A `IntChannel` is used to encode data as some non-positional numeric attribute\nof a visual mark e.g. stroke width, size, font size.\n",
        "args": [
          "data"
        ],
        "type": "Facet.Internal.Channel.IntChannel data"
      },
      {
        "name": "PositionalChannel",
        "comment": " A `PositionalChannel` is used to associate a data value with a position on either\nthe x- or y-axis.\n",
        "args": [
          "data",
          "domain"
        ],
        "type": "Facet.Internal.Channel.PositionalChannel data domain"
      },
      {
        "name": "ShapeChannel",
        "comment": " A `ShapeChannel` is used to encode data as the shape used in a `Symbol` visual\nmark.\n",
        "args": [
          "data"
        ],
        "type": "Facet.Internal.Channel.ShapeChannel data"
      },
      {
        "name": "StrokeDashChannel",
        "comment": " A `StrokeDashChannel` is used to encode data as the stroke dash array\nand (optional) stroke dash offset of a visual mark.\n",
        "args": [
          "data"
        ],
        "type": "Facet.Internal.Channel.StrokeDashChannel data"
      },
      {
        "name": "TextChannel",
        "comment": " A `TextChannel` is used to encode data as the text of a `Text` mark or as the\ntooltip of any visual mark.\n",
        "args": [
          "data"
        ],
        "type": "Facet.Internal.Channel.TextChannel data"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "angle",
        "comment": " ",
        "type": "(comparableDomain -> String) -> Facet.Scale.Scale comparableDomain Float -> Facet.Field.Field data comparableDomain -> Facet.Channel.AngleChannel data"
      },
      {
        "name": "angleCompareWith",
        "comment": " ",
        "type": "(domain -> domain -> Basics.Order) -> (domain -> String) -> Facet.Scale.Scale domain Float -> Facet.Field.Field data domain -> Facet.Channel.AngleChannel data"
      },
      {
        "name": "channel",
        "comment": " ",
        "type": "(comparableDomain -> String) -> Facet.Scale.Scale comparableDomain range -> Facet.Field.Field data comparableDomain -> Facet.Channel.ChannelWithLegend data range"
      },
      {
        "name": "channelCompareWith",
        "comment": " ",
        "type": "(domain -> domain -> Basics.Order) -> (domain -> String) -> Facet.Scale.Scale domain range -> Facet.Field.Field data domain -> Facet.Channel.ChannelWithLegend data range"
      },
      {
        "name": "color",
        "comment": " ",
        "type": "(comparableDomain -> String) -> Facet.Scale.Scale comparableDomain Color.Color -> Facet.Field.Field data comparableDomain -> Facet.Channel.ColorChannel data"
      },
      {
        "name": "colorCompareWith",
        "comment": " ",
        "type": "(domain -> domain -> Basics.Order) -> (domain -> String) -> Facet.Scale.Scale domain Color.Color -> Facet.Field.Field data domain -> Facet.Channel.ColorChannel data"
      },
      {
        "name": "float",
        "comment": " ",
        "type": "(comparableDomain -> String) -> Facet.Scale.Scale comparableDomain Float -> Facet.Field.Field data comparableDomain -> Facet.Channel.FloatChannel data"
      },
      {
        "name": "floatCompareWith",
        "comment": " ",
        "type": "(domain -> domain -> Basics.Order) -> (domain -> String) -> Facet.Scale.Scale domain Float -> Facet.Field.Field data domain -> Facet.Channel.FloatChannel data"
      },
      {
        "name": "int",
        "comment": " ",
        "type": "(comparableDomain -> String) -> Facet.Scale.Scale comparableDomain Int -> Facet.Field.Field data comparableDomain -> Facet.Channel.IntChannel data"
      },
      {
        "name": "intCompareWith",
        "comment": " ",
        "type": "(domain -> domain -> Basics.Order) -> (domain -> String) -> Facet.Scale.Scale domain Int -> Facet.Field.Field data domain -> Facet.Channel.IntChannel data"
      },
      {
        "name": "positional",
        "comment": " ",
        "type": "Facet.Field.Field data comparableDomain -> Facet.Channel.PositionalChannel data comparableDomain"
      },
      {
        "name": "positionalCompareWith",
        "comment": " ",
        "type": "(domain -> domain -> Basics.Order) -> Facet.Field.Field data domain -> Facet.Channel.PositionalChannel data domain"
      },
      {
        "name": "shape",
        "comment": " ",
        "type": "(comparableDomain -> String) -> Facet.Scale.Scale comparableDomain Facet.Scenegraph.Shape.Shape -> Facet.Field.Field data comparableDomain -> Facet.Channel.ShapeChannel data"
      },
      {
        "name": "shapeCompareWith",
        "comment": " ",
        "type": "(domain -> domain -> Basics.Order) -> (domain -> String) -> Facet.Scale.Scale domain Facet.Scenegraph.Shape.Shape -> Facet.Field.Field data domain -> Facet.Channel.ShapeChannel data"
      },
      {
        "name": "strokeDash",
        "comment": " ",
        "type": "(comparableDomain -> String) -> Facet.Scale.Scale comparableDomain Facet.Scenegraph.Stroke.StrokeDash -> Facet.Field.Field data comparableDomain -> Facet.Channel.StrokeDashChannel data"
      },
      {
        "name": "strokeDashCompareWith",
        "comment": " ",
        "type": "(domain -> domain -> Basics.Order) -> (domain -> String) -> Facet.Scale.Scale domain Facet.Scenegraph.Stroke.StrokeDash -> Facet.Field.Field data domain -> Facet.Channel.StrokeDashChannel data"
      },
      {
        "name": "text",
        "comment": " ",
        "type": "(comparableDomain -> String) -> Facet.Scale.Scale comparableDomain String -> Facet.Field.Field data comparableDomain -> Facet.Channel.TextChannel data"
      },
      {
        "name": "textCompareWith",
        "comment": " ",
        "type": "(domain -> domain -> Basics.Order) -> (domain -> String) -> Facet.Scale.Scale domain String -> Facet.Field.Field data domain -> Facet.Channel.TextChannel data"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Facet.Axis",
    "comment": "\n@docs Axis, Horizontal , Vertical\n\n@docs continuousX, continuousY\n\n@docs linearX, linearY, log10X, log10Y, sqrtX, sqrtY\n\n@docs discreteX, discreteY\n\n@docs bandX, customBandX , bandY, customBandY\n\n@docs continuousScale, ordinalScale\n\n@docs continuousDomain, ordinalDomain\n\n@docs ticks, labelFormat,orientTop, orientBottom, orientLeft,orientRight, labelAngle\n\n",
    "aliases": [
      {
        "name": "Axis",
        "comment": " An `Axis` is a special type of `Legend` for positional channels\n",
        "args": [
          "orientation",
          "domain"
        ],
        "type": "Facet.Internal.Axis.Axis orientation domain"
      },
      {
        "name": "Horizontal",
        "comment": " ",
        "args": [],
        "type": "Facet.Internal.Axis.Horizontal"
      },
      {
        "name": "Vertical",
        "comment": " ",
        "args": [],
        "type": "Facet.Internal.Axis.Vertical"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "bandX",
        "comment": " Create an x-axis with a band scale from a comparable domain\n",
        "type": "Maybe.Maybe String -> Facet.Internal.Axis.Axis Facet.Axis.Vertical comparableDomain"
      },
      {
        "name": "bandY",
        "comment": " Create a y-axis with a band scale from a comparable domain\n",
        "type": "Maybe.Maybe String -> Facet.Internal.Axis.Axis Facet.Axis.Horizontal comparableDomain"
      },
      {
        "name": "continuousDomain",
        "comment": " ",
        "type": "( domain, domain ) -> Facet.Axis.Axis orientation domain -> Facet.Axis.Axis orientation domain"
      },
      {
        "name": "continuousScale",
        "comment": " ",
        "type": "(( domain, domain ) -> ( Float, Float ) -> Facet.Scale.Scale domain Float) -> Facet.Axis.Axis orientation domain -> Facet.Axis.Axis orientation domain"
      },
      {
        "name": "continuousX",
        "comment": " Create an x-axis with a continuous domain, defined by an upper and lower\n    limit.\n",
        "type": "Maybe.Maybe String -> (( xdomain, xdomain ) -> ( Float, Float ) -> Facet.Scale.Scale xdomain Float) -> Facet.Axis.Axis Facet.Axis.Vertical xdomain"
      },
      {
        "name": "continuousY",
        "comment": " Create a y-axis with a continuos domain, defined by an upper and lower\n    limit.\n",
        "type": "Maybe.Maybe String -> (( ydomain, ydomain ) -> ( Float, Float ) -> Facet.Scale.Scale ydomain Float) -> Facet.Axis.Axis Facet.Axis.Horizontal ydomain"
      },
      {
        "name": "customBandX",
        "comment": " Create an x-axis with a band scale from an arbitrary domain\n",
        "type": "Maybe.Maybe String -> Facet.Internal.Axis.Axis Facet.Axis.Vertical anyDomain"
      },
      {
        "name": "customBandY",
        "comment": " ",
        "type": "Maybe.Maybe String -> Facet.Internal.Axis.Axis Facet.Axis.Horizontal anyDomain"
      },
      {
        "name": "discreteX",
        "comment": " Create an x-axis with a discrete domain, defined by the list of elements\n    in the domain.\n",
        "type": "Maybe.Maybe String -> (List xdomain -> ( Float, Float ) -> Facet.Scale.Scale xdomain Float) -> Facet.Axis.Axis Facet.Axis.Vertical xdomain"
      },
      {
        "name": "discreteY",
        "comment": " Create an x-axis with a discrete domain, explicitly providing a function\n    to construct an ordinal scale\n",
        "type": "Maybe.Maybe String -> (List ydomain -> ( Float, Float ) -> Facet.Scale.Scale ydomain Float) -> Facet.Axis.Axis Facet.Axis.Horizontal ydomain"
      },
      {
        "name": "labelAngle",
        "comment": " ",
        "type": "Float -> Facet.Internal.Axis.Axis orientation domain -> Facet.Internal.Axis.Axis orientation domain"
      },
      {
        "name": "labelFormat",
        "comment": " ",
        "type": "(domain -> String) -> Facet.Axis.Axis orientation domain -> Facet.Axis.Axis orientation domain"
      },
      {
        "name": "linearX",
        "comment": " ",
        "type": "Maybe.Maybe String -> Facet.Axis.Axis Facet.Axis.Vertical Float"
      },
      {
        "name": "linearY",
        "comment": " ",
        "type": "Maybe.Maybe String -> Facet.Axis.Axis Facet.Axis.Horizontal Float"
      },
      {
        "name": "log10X",
        "comment": " ",
        "type": "Maybe.Maybe String -> Facet.Axis.Axis Facet.Axis.Vertical Float"
      },
      {
        "name": "log10Y",
        "comment": " ",
        "type": "Maybe.Maybe String -> Facet.Axis.Axis Facet.Axis.Horizontal Float"
      },
      {
        "name": "ordinalDomain",
        "comment": " ",
        "type": "List domain -> Facet.Axis.Axis orientation domain -> Facet.Axis.Axis orientation domain"
      },
      {
        "name": "ordinalScale",
        "comment": " ",
        "type": "(List domain -> ( Float, Float ) -> Facet.Scale.Scale domain Float) -> Facet.Axis.Axis orientation domain -> Facet.Axis.Axis orientation domain"
      },
      {
        "name": "orientBottom",
        "comment": " ",
        "type": "Facet.Axis.Axis Facet.Axis.Vertical domain -> Facet.Axis.Axis Facet.Axis.Vertical domain"
      },
      {
        "name": "orientLeft",
        "comment": " ",
        "type": "Facet.Axis.Axis Facet.Axis.Horizontal domain -> Facet.Axis.Axis Facet.Axis.Horizontal domain"
      },
      {
        "name": "orientRight",
        "comment": " ",
        "type": "Facet.Axis.Axis Facet.Axis.Horizontal domain -> Facet.Axis.Axis Facet.Axis.Horizontal domain"
      },
      {
        "name": "orientTop",
        "comment": " ",
        "type": "Facet.Axis.Axis Facet.Axis.Vertical domain -> Facet.Axis.Axis Facet.Axis.Vertical domain"
      },
      {
        "name": "sqrtX",
        "comment": " ",
        "type": "Maybe.Maybe String -> Facet.Axis.Axis Facet.Axis.Vertical Float"
      },
      {
        "name": "sqrtY",
        "comment": " ",
        "type": "Maybe.Maybe String -> Facet.Axis.Axis Facet.Axis.Horizontal Float"
      },
      {
        "name": "ticks",
        "comment": " ",
        "type": "Int -> Facet.Axis.Axis orientation domain -> Facet.Axis.Axis orientation domain"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Facet.Field",
    "comment": "\n@docs Field\n\n@docs constant\n\n@docs scalar, maybeScalar\n\n@docs aggregate, maybeAggregate\n\n@docs vector, maybeVector\n",
    "aliases": [
      {
        "name": "Field",
        "comment": " A `Field` is a means of extracting a value from some data type.\n\n    There are different `Field`s allowing you to extract different 'shapes'\n    of data:\n    - A scalar `Field` extracts single item from a single piece of data;\n    - A vector `Field` extracts a list of items from a list of data;\n    - An aggregate `Field` summarizes a list of data as a single item.\n\n    In addition, each type of field supports situations where the item you\n    are extracting may be missing.\n",
        "args": [
          "data",
          "domain"
        ],
        "type": "Facet.Internal.Field.Field data domain"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "aggregate",
        "comment": " ",
        "type": "Maybe.Maybe String -> (List data -> domain) -> Facet.Field.Field data domain"
      },
      {
        "name": "constant",
        "comment": " ",
        "type": "domain -> Facet.Field.Field data domain"
      },
      {
        "name": "maybeAggregate",
        "comment": " ",
        "type": "Maybe.Maybe String -> (List data -> Maybe.Maybe domain) -> Facet.Field.Field data domain"
      },
      {
        "name": "maybeScalar",
        "comment": " ",
        "type": "Maybe.Maybe String -> (data -> Maybe.Maybe domain) -> Facet.Field.Field data domain"
      },
      {
        "name": "maybeVector",
        "comment": " ",
        "type": "Maybe.Maybe String -> (List data -> List (Maybe.Maybe domain)) -> Facet.Field.Field data domain"
      },
      {
        "name": "scalar",
        "comment": " ",
        "type": "Maybe.Maybe String -> (data -> domain) -> Facet.Field.Field data domain"
      },
      {
        "name": "vector",
        "comment": " ",
        "type": "Maybe.Maybe String -> (List data -> List domain) -> Facet.Field.Field data domain"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Facet.Scale",
    "comment": "\n@docs Scale,scale, unscale, ticks, legend\n\n@docs constant, sequential, continuous, ordinal, customOrdinal\n\n@docs  OutsideDomain, clamp, discard, allow\n\n@docs linear, linearNice , log10, naturalLog, sqrt\n\n@docs band, customBand\n\n@docs rgb, rgbBasis, hsl\n\n@docs tableau10, category10\n",
    "aliases": [
      {
        "name": "OutsideDomain",
        "comment": " ",
        "args": [],
        "type": "Scale.Config.OutsideDomain"
      }
    ],
    "types": [
      {
        "name": "Scale",
        "comment": " A scale provides a means of mapping between values of type _domain_ to\n    values of type _range_.\n",
        "args": [
          "domain",
          "range"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "allow",
        "comment": " ",
        "type": "Scale.Config.OutsideDomain"
      },
      {
        "name": "band",
        "comment": " ",
        "type": "List comparable -> ( Float, Float ) -> Facet.Scale.Scale comparable Float"
      },
      {
        "name": "category10",
        "comment": " ",
        "type": "List comparable -> Facet.Scale.Scale comparable Color.Color"
      },
      {
        "name": "clamp",
        "comment": " ",
        "type": "Scale.Config.OutsideDomain"
      },
      {
        "name": "constant",
        "comment": " ",
        "type": "a -> Facet.Scale.Scale domain a"
      },
      {
        "name": "continuous",
        "comment": " ",
        "type": "{ a | compareDomain : domain -> domain -> Basics.Order, deinterpolateDomain : ( domain, domain ) -> domain -> Float, domain : ( domain, domain ), interpolateRange : ( range, range ) -> Float -> range, outsideDomain : Facet.Scale.OutsideDomain, range : ( range, range ), reinterpolateDomain : ( domain, domain ) -> range -> domain, ticks : ( domain, domain ) -> Int -> List domain } -> Facet.Scale.Scale domain range"
      },
      {
        "name": "customBand",
        "comment": " ",
        "type": "List domain -> ( Float, Float ) -> Facet.Scale.Scale domain Float"
      },
      {
        "name": "customOrdinal",
        "comment": " ",
        "type": "Scale.Ordinal.Custom.Custom a domain range -> Facet.Scale.Scale domain range"
      },
      {
        "name": "discard",
        "comment": " ",
        "type": "Scale.Config.OutsideDomain"
      },
      {
        "name": "hsl",
        "comment": " ",
        "type": "Bool -> ( Float, Float ) -> ( Color.Color, Color.Color ) -> Facet.Scale.Scale Float Color.Color"
      },
      {
        "name": "legend",
        "comment": " ",
        "type": "Facet.Scale.Scale domain range -> Int -> List ( domain, range )"
      },
      {
        "name": "linear",
        "comment": " ",
        "type": "( Float, Float ) -> ( Float, Float ) -> Facet.Scale.Scale Float Float"
      },
      {
        "name": "linearNice",
        "comment": " ",
        "type": "Int -> ( Float, Float ) -> ( Float, Float ) -> Facet.Scale.Scale Float Float"
      },
      {
        "name": "log10",
        "comment": " ",
        "type": "( Float, Float ) -> ( Float, Float ) -> Facet.Scale.Scale Float Float"
      },
      {
        "name": "naturalLog",
        "comment": " ",
        "type": "( Float, Float ) -> ( Float, Float ) -> Facet.Scale.Scale Float Float"
      },
      {
        "name": "ordinal",
        "comment": " ",
        "type": "Scale.Ordinal.Comparable.Comparable a comparableDomain range -> Facet.Scale.Scale comparableDomain range"
      },
      {
        "name": "rgb",
        "comment": " ",
        "type": "( Float, Float ) -> ( Color.Color, Color.Color ) -> Facet.Scale.Scale Float Color.Color"
      },
      {
        "name": "rgbBasis",
        "comment": " ",
        "type": "Bool -> ( Float, Float ) -> List Color.Color -> Facet.Scale.Scale Float Color.Color"
      },
      {
        "name": "scale",
        "comment": " ",
        "type": "Facet.Scale.Scale domain range -> domain -> Maybe.Maybe range"
      },
      {
        "name": "sequential",
        "comment": " ",
        "type": "{ a | compareDomain : domain -> domain -> Basics.Order, deinterpolateDomain : ( domain, domain ) -> domain -> Float, domain : ( domain, domain ), interpolator : Float -> range, outsideDomain : Facet.Scale.OutsideDomain, ticks : ( domain, domain ) -> Int -> List domain } -> Facet.Scale.Scale domain range"
      },
      {
        "name": "sqrt",
        "comment": " ",
        "type": "( Float, Float ) -> ( Float, Float ) -> Facet.Scale.Scale Float Float"
      },
      {
        "name": "tableau10",
        "comment": " ",
        "type": "List comparable -> Facet.Scale.Scale comparable Color.Color"
      },
      {
        "name": "ticks",
        "comment": " ",
        "type": "Facet.Scale.Scale domain range -> Int -> List domain"
      },
      {
        "name": "unscale",
        "comment": " ",
        "type": "Facet.Scale.Scale domain Float -> Float -> Maybe.Maybe domain"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]