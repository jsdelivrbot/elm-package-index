[
  {
    "name": "Statechart",
    "comment": " A pure Elm implementation of statecharts designed to hook direct;y into The Elm Architecture\nupdate function.\n\n@docs Statechart\n@docs StateModel\n@docs decoder\n@docs encode\n@docs mkStatechart\n@docs mkCompoundState\n@docs mkState\n@docs noAction\n@docs empty\n@docs start\n@docs step\n",
    "aliases": [
      {
        "name": "StateModel",
        "comment": "\n",
        "args": [],
        "type": "{ currentStateName : String , targetStateName : String , history : Dict.Dict String String }"
      },
      {
        "name": "Statechart",
        "comment": "\n",
        "args": [
          "msg",
          "model"
        ],
        "type": "Tree.Tree (Statechart.StateConfig msg model)"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "decoder",
        "comment": " Decode a stored StateModel.\n",
        "type": "Json.Decode.Decoder Statechart.StateModel"
      },
      {
        "name": "empty",
        "comment": " An empty StateModel; this is the initial value in the model.\n",
        "type": "Statechart.StateModel"
      },
      {
        "name": "encode",
        "comment": " Encode the StateModel into a value ready to be stored in the main model.\n",
        "type": "Statechart.StateModel -> Json.Encode.Value"
      },
      {
        "name": "mkCompoundState",
        "comment": " Make a compound state from a StateConfig\n",
        "type": "Statechart.BranchStateConfig msg model -> List (Statechart.Statechart msg model) -> Statechart.Statechart msg model"
      },
      {
        "name": "mkState",
        "comment": " Make a state from a StateConfig\n",
        "type": "Statechart.LeafStateConfig msg model -> Statechart.Statechart msg model"
      },
      {
        "name": "mkStatechart",
        "comment": " Make the top level statechart\n",
        "type": "String -> List (Statechart.Statechart msg model) -> Statechart.Statechart msg model"
      },
      {
        "name": "noAction",
        "comment": " The identity action that does nothing\n",
        "type": "Statechart.Action model msg"
      },
      {
        "name": "start",
        "comment": " Start the statechart based on the StateModel.\n",
        "type": "Statechart.Config msg model -> ( model, Platform.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "step",
        "comment": " Step through the statechart in response to an incoming message.\n",
        "type": "Statechart.Config msg model -> msg -> ( model, Platform.Cmd.Cmd msg ) -> ( model, Platform.Cmd.Cmd msg )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]