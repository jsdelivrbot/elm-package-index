[
  {
    "name": "Arborist",
    "comment": " Drag-and-drop interface to edit, dissect and-rearrange tree structures with arbitrary data sitting in their nodes. Structured as a TEA component defining its own init, update and view, `elm-arborist` allows you to easily initialize a tree editor, keep its state in an opaque model, and access the [edited result at any time](#tree).\n\n\n# Module setup\n\n@docs Model, Msg, init, initWith, update, NodeView, StyledNodeView, view, styledView, subscriptions\n\n\n# Configuration\n\n@docs applySettings, resize\n\n\n# Creating and modifying raw trees\n\n@docs Tree, node, empty, expand, flatten, decoder, encoder\n\n\n# Arborist tree getters and modifiers\n\n@docs tree, activeNode, setActiveNode, deleteActiveNode\n\n\n# Display modifiers\n\n@docs reposition, deactivate\n\n\n# Context\n\n@docs NodeState, Context\n\n",
    "aliases": [
      {
        "name": "Context",
        "comment": " View context. Contains the following fields:\n\n  - `parent`: the item at the parent, not available for the root node\n  - `siblings`: a list of all direct siblings\n  - `children`: a list of all direct children\n  - `state`: node [state](#NodeState)\n\n",
        "args": [
          "item"
        ],
        "type": "{ parent : Maybe.Maybe item , siblings : List item , children : List item , state : Arborist.NodeState }"
      },
      {
        "name": "NodeView",
        "comment": " View function for an individual node, depending on its [context](Context), and its value. This value is expressed as a maybe because the node may contain an `insert new node`-type placeholder.\n",
        "args": [
          "node"
        ],
        "type": "Arborist.Context node -> Maybe.Maybe node -> Html.Html Arborist.Msg"
      },
      {
        "name": "StyledNodeView",
        "comment": " Styled version of [NodeView](#NodeView), using `elm-css`.\n",
        "args": [
          "node"
        ],
        "type": "Arborist.Context node -> Maybe.Maybe node -> Html.Styled.Html Arborist.Msg"
      },
      {
        "name": "Tree",
        "comment": " Opaque type for a tree.\n",
        "args": [
          "node"
        ],
        "type": "Tree.Tree node"
      }
    ],
    "types": [
      {
        "name": "Model",
        "comment": " Opaque type for the editor's model, dependent on a node type variable. You can only use this for type annotation - to initialize a new model, see [init](#init).\n",
        "args": [
          "node"
        ],
        "cases": []
      },
      {
        "name": "Msg",
        "comment": " Module messages\n",
        "args": [],
        "cases": []
      },
      {
        "name": "NodeState",
        "comment": " The state of a node at a given time. May be normal one of the following:\n\n  - `Normal`: node in rest state\n  - `Hovered`: a hovered over node\n  - `Active`: an activated node. Overrides hover\n  - `DropTarget`: indicates that a swap or insert of the dragged subtree will take place at this node upon release\n\n",
        "args": [],
        "cases": [
          [
            "Normal",
            []
          ],
          [
            "Active",
            []
          ],
          [
            "Hovered",
            []
          ],
          [
            "DropTarget",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "activeNode",
        "comment": " Returns the current active node as a tuple of `Maybe node` (as the node maybe a placeholder for a new node), as well as some contextual information as a two-field record:\n\n  - `position : ( Float, Float )`: the node's position on the canvas (useful for rendering an edit pop-up).\n  - `context`: view context, identical to the one provided in [NodeView](#NodeView).\n\n",
        "type": "Arborist.Model node -> Maybe.Maybe ( Maybe.Maybe node , { position : ( Float, Float ), context : Arborist.Context node } )"
      },
      {
        "name": "applySettings",
        "comment": " Apply a new list of settings to the model.\n",
        "type": "List Internal.Settings.Setting -> Arborist.Model node -> Arborist.Model node"
      },
      {
        "name": "deactivate",
        "comment": " Remove active node\n",
        "type": "Arborist.Model node -> Arborist.Model node"
      },
      {
        "name": "decoder",
        "comment": " Tree decoder as a function of the node's decoder. Assumes a `value` and `children` fields, holding the current node contents and an array of children, respectively.\n",
        "type": "Json.Decode.Decoder node -> Json.Decode.Decoder (Tree.Tree node)"
      },
      {
        "name": "deleteActiveNode",
        "comment": " Delete the active node from a tree, including all of its children. If a placeholder is active, this method does nothing.\n",
        "type": "Arborist.Model node -> Arborist.Model node"
      },
      {
        "name": "empty",
        "comment": " Empty tree.\n",
        "type": "Tree.Tree node"
      },
      {
        "name": "encoder",
        "comment": " Encodes a tree into JSON, given its node encoder.\n",
        "type": "(node -> Json.Encode.Value) -> Tree.Tree node -> Json.Encode.Value"
      },
      {
        "name": "expand",
        "comment": " Expand a tree into a raw data structure that can be recursed by the user:\n\n  - if the tree is empty, it returns `Nothing`.\n  - if the tree isn't empty, it returns `Just ( currentNode, childtrees )`\n\nCompared to the [tree example](http://elm-lang.org/examples/binary-tree) on Elm's website, the `Empty` and `Node` constructors are deliberately not exposed by this library, in order to accommodate a few not-so-common node use-cases that make said union type complicated for a newcomer to the library.\n\n",
        "type": "Tree.Tree node -> Maybe.Maybe ( node, List (Arborist.Tree node) )"
      },
      {
        "name": "flatten",
        "comment": " Flatten tree into a list of ( path, node ) tuples.\n",
        "type": "Tree.Tree node -> List ( List Int, node )"
      },
      {
        "name": "init",
        "comment": " Initialize model from a [tree](Tree).\n",
        "type": "Tree.Tree node -> Arborist.Model node"
      },
      {
        "name": "initWith",
        "comment": " Initialize model from a [tree](Tree), using a list of [settings](Settings).\n",
        "type": "List Internal.Settings.Setting -> Tree.Tree node -> Arborist.Model node"
      },
      {
        "name": "node",
        "comment": " Non-empty node, constructed from a single root node and an array of children represented as trees.\n\n    node \"Parent\" [ node \"Child1\" [], node \"Child2\" [] ]\n\n",
        "type": "nodeType -> List (Tree.Tree nodeType) -> Tree.Tree nodeType"
      },
      {
        "name": "reposition",
        "comment": " Restores the original pan position of the tree.\n",
        "type": "Arborist.Model node -> Arborist.Model node"
      },
      {
        "name": "resize",
        "comment": " Resize the canvas by passing a new width and a new height. Note that you can reproduce this using [applySettings](#applySettings) as follows:\n\n    resize 600 400 arborist == applySettings [ Settings.canvasWidth 600, Settings.canvasHeight 400 ] arborist\n\n",
        "type": "Int -> Int -> Arborist.Model node -> Arborist.Model node"
      },
      {
        "name": "setActiveNode",
        "comment": " Sets a new node at the active position. This may be adding a completely new node from scratch (in case the current node is a placeholder), or modifying an existing one. Typically, the modification is based off an original value provided by the [activeNodeWithContext](#activeNodeWithContext) method.\n",
        "type": "node -> Arborist.Model node -> Arborist.Model node"
      },
      {
        "name": "styledView",
        "comment": " The editor's view function, taking the following arguments:\n\n  - [NodeView](#NodeView): view function for an individual node.\n  - a list of html attributes for the container element.\n  - the editor's [model](#Model).\n\n",
        "type": "Arborist.StyledNodeView node -> List (Html.Styled.Attribute Arborist.Msg) -> Arborist.Model node -> Html.Styled.Html Arborist.Msg"
      },
      {
        "name": "subscriptions",
        "comment": " Subscriptions responsible for obtaining animation frames used to smoothly center an activated tree node. Using these subscriptions is completely optional - if they aren't wired up in your app, the editor will simply jump to the activated node without an animation. We recommend adding these subscriptions as you familiarize yourself with the package, as it is a significant user experience improvement.\n",
        "type": "Arborist.Model node -> Platform.Sub.Sub Arborist.Msg"
      },
      {
        "name": "tree",
        "comment": " Access the current state of the tree through this getter (returns structure defined in the `Arborist.Tree` module). The result reflects all changes since it was [initialized](#init).\n",
        "type": "Arborist.Model node -> Tree.Tree node"
      },
      {
        "name": "update",
        "comment": " Update function handling changes in the model.\n",
        "type": "Arborist.Msg -> Arborist.Model node -> Arborist.Model node"
      },
      {
        "name": "view",
        "comment": " Styled version of [view](#NodeView), using `elm-css`.\n",
        "type": "Arborist.NodeView node -> List (Html.Attribute Arborist.Msg) -> Arborist.Model node -> Html.Html Arborist.Msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Arborist.Settings",
    "comment": " Various settings for the editor, defined at the time of [initialization](Arborist#initWith), or [added](Arborist#applySettings) at any time later in the program. Includes various geometric settings such as canvas dimensions and the gutter between nodes, and, in a later version of this package, more functional settings such as hiding placeholder nodes.\n\n@docs nodeWidth, nodeHeight, canvasWidth, canvasHeight, level, gutter, centerOffset, connectorStroke, connectorStrokeWidth, dragAndDrop, placeholderLeaves, throttleMouseMoves, sturdyMode\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "canvasHeight",
        "comment": " Sets the height of the canvas.\n",
        "type": "Int -> Internal.Settings.Setting"
      },
      {
        "name": "canvasWidth",
        "comment": " Sets the width of the canvas.\n",
        "type": "Int -> Internal.Settings.Setting"
      },
      {
        "name": "centerOffset",
        "comment": " When a node is activated, the interface centers it automatically. Sometimes, though, it is useful to move it somewhere other than the center, e.g. to accommodate a large pop-up underneath. With this configuration option, you can specify this offset, horizontal first, vertical second.\n",
        "type": "Int -> Int -> Internal.Settings.Setting"
      },
      {
        "name": "connectorStroke",
        "comment": " Stroke color of the lines connecting siblings.\n",
        "type": "String -> Internal.Settings.Setting"
      },
      {
        "name": "connectorStrokeWidth",
        "comment": " Stroke width of the lines connecting siblings.\n",
        "type": "String -> Internal.Settings.Setting"
      },
      {
        "name": "dragAndDrop",
        "comment": " Enable or disable drag and drop with this boolean flag (`True` is enabled, which is the default value). Note that the tree can still be panned if drag and drop is disabled.\n",
        "type": "Bool -> Internal.Settings.Setting"
      },
      {
        "name": "gutter",
        "comment": " Horizontal gutter between nodes.\n",
        "type": "Int -> Internal.Settings.Setting"
      },
      {
        "name": "level",
        "comment": " Vertical distance between the bottom of a parent node and the top of its child.\n",
        "type": "Int -> Internal.Settings.Setting"
      },
      {
        "name": "nodeHeight",
        "comment": " Sets the width of node.\n",
        "type": "Int -> Internal.Settings.Setting"
      },
      {
        "name": "nodeWidth",
        "comment": " Sets the width of node.\n",
        "type": "Int -> Internal.Settings.Setting"
      },
      {
        "name": "placeholderLeaves",
        "comment": " Set whether placeholder leaves should be displayed.\n",
        "type": "Bool -> Internal.Settings.Setting"
      },
      {
        "name": "sturdyMode",
        "comment": " Enables sturdy mode: as long as the tree is not empty, there is always one active node. Use this mode when it is critical that active node-related feedback doesn't leave the screen.\n",
        "type": "Bool -> Internal.Settings.Setting"
      },
      {
        "name": "throttleMouseMoves",
        "comment": " Turn on mouse move throttling over a specified interval. You must connect `subscriptions` for this to work.\n",
        "type": "Time.Time -> Internal.Settings.Setting"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]