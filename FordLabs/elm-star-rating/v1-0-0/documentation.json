[{"name":"Rating","comment":" A simple five star rating component. Uses unicode star characters (U+2605 & U+2606).\n\n\n# Init\n\n@docs initialState\n\n\n# View\n\n@docs classView, styleView\n\n\n# Update\n\n@docs update\n\n\n# Helpers\n\n@docs get\n\n\n# Types\n\n@docs State, Msg\n\n","unions":[{"name":"Msg","comment":" Opaque type obscuring rating messages\n","args":[],"cases":[]},{"name":"State","comment":" Opaque type obscuring rating model\n","args":[],"cases":[]}],"aliases":[],"values":[{"name":"classView","comment":" Render the component. Accepts a list of css class names and a Rating.State.\nNote that the component uses text characters to display the stars, so use css accordingly.\n\n    Rating.view [ \"cssClass1\", \"cssClass2\" ] ratingState\n\n","type":"List.List String.String -> Rating.State -> Html.Html Rating.Msg"},{"name":"get","comment":" Get the current rating\n\n    Rating.get ratingState\n\n","type":"Rating.State -> Basics.Int"},{"name":"initialState","comment":" Initial rating state. Sets rating to zero.\n","type":"Rating.State"},{"name":"styleView","comment":" Render the component. Accepts a list of style tuples and a Rating.State.\nNote that the component uses text characters to display the stars, so use css accordingly.\n\n    Rating.view [ ( \"color\", \"red\" ) ] ratingState\n\n","type":"List.List ( String.String, String.String ) -> Rating.State -> Html.Html Rating.Msg"},{"name":"update","comment":" Update the state of the rating component.\n\n    RatingMsg msg ->\n        ( { model | ratingState = (Rating.update msg model.ratingState) }, Cmd.none )\n\n","type":"Rating.Msg -> Rating.State -> Rating.State"}],"binops":[]}]