[{"name":"Gamepad","comment":" You need a JavaScript port to get the gamepad information inside Elm.\nYou can copy the port files from [port/](https://github.com/xarvh/elm-gamepad/tree/master/port).\n\nWithin the library, the raw gamepad information produced by the port is called [Blob](#Blob).\n\nYou can get a list of all recognised and connected gamepads with [getGamepads](#getGamepads).\n\nThe `Digital` and `Analog` types define names for the controls available on gamepads, and\ncan be used with various getter functions, such as\n\n    Gamepad.value gamepad LeftTriggerAnalog == 0.1\n\nThe library also includes a button remapping tool: the tool is very important because\nwhile many gamepads have [a standard mapping](https://www.w3.org/TR/gamepad/#remapping)\nand will be configured automatically, many other gamepads won't; some users will also\nwant to customise the buttons for comfort or accessibility.\n\nAll the user-created mappings are collected together in the `UserMappings` object,\nand should be persisted within the browser's local storage or IndexedDB, to save\nthe user from having to remap the gamepad at every page load.\n\n\n@docs Blob\n\n\n# Animation Frame\n\nThe library reads the state of the gamepads at every new animation frame of the browser, so if you are using\n[Browser.Events.onAnimationFrame](https://package.elm-lang.org/packages/elm/browser/latest/Browser-Events#onAnimationFrame)\nor\n[Browser.Events.onAnimationFrameDelta](https://package.elm-lang.org/packages/elm/browser/latest/Browser-Events#onAnimationFrameDelta)\nyou should remove them, and instead use `animationFrameTimestamp` or `animationFrameDelta` to get the frame\ntiming information from the `Blob`.\n\n@docs animationFrameTimestamp, animationFrameDelta\n\n\n# User Mappings\n\n@docs UserMappings, emptyUserMappings, userMappingsFromString, userMappingsToString, userMappingsDecoder, encodeUserMappings\n\n\n# Gamepads\n\n@docs Gamepad, Analog, Digital, getGamepads, getIndex , isPressed , wasClicked , wasReleased , value , leftStickPosition , rightStickPosition , dpadPosition\n\n\n# Remapping\n\n@docs RemapModel, RemapMsg, remapInit, remapSubscriptions, remapUpdate, remapView, isRemapping, haveUnmappedGamepads\n\n","unions":[{"name":"Analog","comment":" Some controls can be accessed also as analog and this type defines special\nnames for them.\n","args":[],"cases":[["LeftX",[]],["LeftY",[]],["LeftTriggerAnalog",[]],["RightX",[]],["RightY",[]],["RightTriggerAnalog",[]]]},{"name":"Digital","comment":" This type defines names for all available digital controls, whose\nstate can be either `True` or `False`.\n\nSince the names cover all controls defined the [W3C draft](https://www.w3.org/TR/gamepad/),\nthey are used also when when remapping the gamepad, to declare which action should be\nbound to which control.\n\n","args":[],"cases":[["A",[]],["B",[]],["X",[]],["Y",[]],["Start",[]],["Back",[]],["Home",[]],["LeftStickPress",[]],["LeftStickUp",[]],["LeftStickDown",[]],["LeftStickLeft",[]],["LeftStickRight",[]],["LeftTrigger",[]],["LeftBumper",[]],["RightStickPress",[]],["RightStickUp",[]],["RightStickDown",[]],["RightStickLeft",[]],["RightStickRight",[]],["RightTrigger",[]],["RightBumper",[]],["DpadUp",[]],["DpadDown",[]],["DpadLeft",[]],["DpadRight",[]]]},{"name":"Gamepad","comment":" A gamepad with a known mapping.\nYou can use all control getters to query its state.\n","args":[],"cases":[]},{"name":"RemapModel","comment":" The current state of the remap tool\n","args":[],"cases":[]},{"name":"RemapMsg","comment":" [The Elm Architecture](https://guide.elm-lang.org/architecture/) `Msg` type\n","args":[],"cases":[]},{"name":"UserMappings","comment":" The collection of button maps created by the user when remapping.\n","args":[],"cases":[]}],"aliases":[{"name":"Blob","comment":" The Blob contains the raw gamepad data provided by the browser.\n\nThe whole point of this library is to transform the Blob into something\nthat is nice to use with Elm.\n\n","args":[],"type":"Gamepad.Blob.Blob"}],"values":[{"name":"animationFrameDelta","comment":" This function gives the time passed between the last browser animation\nframe and the current one, in milliseconds.\n\nIt is the same value you get when using `Browser.Events.onAnimationFrameDelta`.\n\n    update msg model =\n      case msg of\n        OnGamepad blob ->\n          let\n              -- Cap the elapsed time, in case the user hides the page and comes back later.\n              deltaTimeInMilliseconds = min 200 (Gamepad.animationFrameDelta blob)\n\n        ...\n\n","type":"Gamepad.Blob -> Basics.Float"},{"name":"animationFrameTimestamp","comment":" This function gives the Posix timestamp of the current browser animation\nframe.\n\nIt is the same value you get when using `Browser.Events.onAnimationFrame`.\n\n    update msg model =\n      case msg of\n        OnGamepad blob ->\n          let\n              posixTimestamp = Gamepad.animationFrame blob\n\n        ...\n\n","type":"Gamepad.Blob -> Time.Posix"},{"name":"dpadPosition","comment":" X and Y coordinates (-1, 0 or +1) of the digital pad.\n","type":"Gamepad.Gamepad -> { x : Basics.Int, y : Basics.Int }"},{"name":"emptyUserMappings","comment":" UserMappings without any actual user mapping.\n\nGamepads that the browser recognises as \"standard\" will still be usable.\n\n","type":"Gamepad.UserMappings"},{"name":"encodeUserMappings","comment":" Encodes a UserMappings into a JSON `Value`.\n","type":"Gamepad.UserMappings -> Json.Encode.Value"},{"name":"getGamepads","comment":" This function takes the user mappings and the latest blob and returns the\ncurrent states of all recognised gamepads.\n\nOnly recognised gamepads will be returned; use `haveUnmappedGamepads` to see\nif there is any gamepad that can be configured.\n\n    update msg model =\n      case OnGamepad blob ->\n        let\n            isFiring = Gamepad.isPressed Gamepad.A\n\n            playerFiringByIndex =\n              blob\n                |> Gamepad.getGamepads model.userMappings\n                |> List.map (\\gamepad -> Gamepad.getIndex isFiring gamepad))\n                |> Dict.fromList\n        in\n            updateState playerFiringByIndex\n\n","type":"Gamepad.UserMappings -> Gamepad.Blob -> List.List Gamepad.Gamepad"},{"name":"getIndex","comment":" Get the index of a known gamepad.\nTo match the LED indicator on XBOX gamepads, indices start from 1.\n\n    getIndex gamepad == 2\n\n","type":"Gamepad.Gamepad -> Basics.Int"},{"name":"haveUnmappedGamepads","comment":" This function returns `True` if there are connected gamepads that cannot\nbe autoconfigured and are not in `UserMappings`.\nIf so, ask the user to remap them!\n","type":"Gamepad.UserMappings -> Gamepad.Blob -> Basics.Bool"},{"name":"isPressed","comment":" Returns `True` if the button is currently being held down.\n","type":"Gamepad.Gamepad -> Gamepad.Digital -> Basics.Bool"},{"name":"isRemapping","comment":" Returns `True` if the remap tool is currently guiding the user in\nremapping a gamepad.\n\nThis is useful because while this happens, you generally want to ignore gamepad\ninput, as the user is trying to change the _meaning_ of the buttons.\n\n","type":"Gamepad.RemapModel -> Basics.Bool"},{"name":"leftStickPosition","comment":" X and Y coordinates (-1 to +1) of the left stick.\n","type":"Gamepad.Gamepad -> { x : Basics.Float, y : Basics.Float }"},{"name":"remapInit","comment":" [The Elm Architecture](https://guide.elm-lang.org/architecture/) `init`\n","type":"Gamepad.RemapModel"},{"name":"remapSubscriptions","comment":" [The Elm Architecture](https://guide.elm-lang.org/architecture/)\n`subscriptions` function.\n\nInstead of a model, it takes as an argument the gamepad Port.\n\n    import Gamepad\n    import GamepadPort\n\n    ...\n\n    subscriptions : Model -> Sub Msg\n    subscriptions model =\n      Sub.batch\n        [ Gamepad.remapSubscriptions GamepadPort.gamepad |> Sub.map OnRemapMsg\n        , ...\n        ]\n\n","type":"Gamepad.PortSubscription Gamepad.RemapMsg -> Platform.Sub.Sub Gamepad.RemapMsg"},{"name":"remapUpdate","comment":" [The Elm Architecture](https://guide.elm-lang.org/architecture/) `update`\nfunction.\n\nWhen a remapping is finished, it will return a function to update the user\nmappings.\n\nYou will want to persist the new user mapping, otherwise the user will need\nto remap every time tha page reloads.\n\n","type":"List.List ( String.String, Gamepad.Digital ) -> Gamepad.RemapMsg -> Gamepad.RemapModel -> ( Gamepad.RemapModel, Maybe.Maybe (Gamepad.UserMappings -> Gamepad.UserMappings) )"},{"name":"remapView","comment":" [The Elm Architecture](https://guide.elm-lang.org/architecture/) `view`\nfunction.\n\nYou can use it as it is, or customise it with CSS: every element has its\nown class name, all names are prefixed with `elm-gamepad`.\n\n","type":"List.List Gamepad.Action -> Gamepad.UserMappings -> Gamepad.RemapModel -> Html.Html Gamepad.RemapMsg"},{"name":"rightStickPosition","comment":" X and Y coordinates (-1 to +1) of the right stick.\n","type":"Gamepad.Gamepad -> { x : Basics.Float, y : Basics.Float }"},{"name":"userMappingsDecoder","comment":" Decodes a UserMappings from a JSON `Value`.\n","type":"Json.Decode.Decoder Gamepad.UserMappings"},{"name":"userMappingsFromString","comment":" Creates UserMappings from a JSON string.\n\n    userMappings =\n        flags.gamepadUserMappings\n            |> Gamepad.userMappingsFromString\n            |> Result.withDefault Gamepad.emptyUserMappings\n\n","type":"String.String -> Result.Result Json.Decode.Error Gamepad.UserMappings"},{"name":"userMappingsToString","comment":" Transforms UserMappings into a JSON string.\n\n    saveUserMappingsToLocalStorageCmd =\n        userMappings\n            |> Gamepad.userMappingsToString\n            |> LocalStoragePort.set 'gamepadUserMappings'\n\n","type":"Gamepad.UserMappings -> String.String"},{"name":"value","comment":" Returns a single value from an analog control.\n","type":"Gamepad.Gamepad -> Gamepad.Analog -> Basics.Float"},{"name":"wasClicked","comment":" Returns `True` when a button **changes** from being up to being pushed down.\n","type":"Gamepad.Gamepad -> Gamepad.Digital -> Basics.Bool"},{"name":"wasReleased","comment":" Returns `True` when a button **changes** from being held down to going back up.\n","type":"Gamepad.Gamepad -> Gamepad.Digital -> Basics.Bool"}],"binops":[]}]